<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="/css/cart.css">
    <link rel="stylesheet" href="/css/home.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<body>

    <nav class="main-nav">
        <div class="nav-container">
            <div class="logo-container">
                <img src="/images/Fiora1/2.png" style="width: 4rem;" class="logo" alt="Logo" />
            </div>

            <!-- Desktop Menu -->
            <div class="nav-links">
                <a href="/" class="nav-link">Home</a>
                <a href="/products" class="nav-link">Shop</a>
                <a href="/contact" class="nav-link">Contact</a>
            </div>

            <!-- Icons for desktop -->
            <div class="nav-icons">
                <a href="<%= locals.user ? '/signup' : '/wishlist' %>"><span
                        class="material-symbols-outlined">favorite</span></a>
                <a href="<%= locals.user ? '/signup' : '/userProfile' %>"><span
                        class="material-symbols-outlined">account_circle</span></a>
            </div>

            <!-- Hamburger Menu Button -->
            <div class="hamburger-menu">
                <span class="material-symbols-outlined">menu</span>
            </div>
        </div>

        <!-- Mobile Menu -->
        <div class="mobile-menu">
            <a href="/" class="mobile-link">
                <span class="material-symbols-outlined">home</span>
                Home
            </a>
            <a href="/profile" class="mobile-link">
                <span class="material-symbols-outlined">person</span>
                Profile
            </a>
            <a href="/wishlist" class="mobile-link">
                <span class="material-symbols-outlined">favorite</span>
                Wishlist
            </a>
            <a href="/logout" class="mobile-link">
                <span class="material-symbols-outlined">logout</span>
                Logout
            </a>
        </div>
    </nav>

    <div class="container" style="margin-bottom: 250px;">
        <div class="cart-section">
            <h2>Shopping Cart</h2>
            <% if (cartItems && cartItems.length> 0) { %>
                <div class="cart-header">
                    <span>Product</span>
                    <span>Price</span>
                    <span>Quantity</span>
                    <span>Subtotal</span>
                </div>
                <div id="cartItems">
                    <% cartItems.forEach((item, i)=> { %>
                        <div class="cart-item" data-id="<%= item.productId._id %>">
                            <img src="<%= item.productId.productImage[i] %>" alt="<%= item.productId.productName %>">
                            <div class="item-details">
                                <h3>
                                    <%= item.productId.productName %>
                                </h3>
                            </div>
                            <div class="price">₹<%= item.price.toFixed(2) %>
                            </div>
                            <input type="number" class="quantity-input" value="<%= item.quantity %>" min="1"
                                max="<%= item.productId.quantity %>"
                                onchange="updateItemQuantity('<%= item.productId._id %>', this.value)">
                            <div class="subtotal">₹<%= item.totalPrice.toFixed(2) %>
                            </div>
                            <button class="remove-btn" onclick="removeItem('<%= item.productId._id %>')">×</button>
                        </div>
                        <% }); %>
                </div>
                <div class="coupon-section">
                    <input type="text" id="couponInput" class="coupon-input" placeholder="Coupon code">
                    <button class="apply-coupon" onclick="applyCoupon()">Apply coupon</button>
                    <button class="update-cart" onclick="updateCart()">↻ Update cart</button>
                </div>
                <p id="couponMessage"></p>
                <% } else { %>
                    <div class="empty-state">
                        <h3>Your cart is empty</h3>
                        <a href="/products" class="shop-now-btn">Shop Now</a>
                    </div>
                    <% } %>
        </div>

        <div class="cart-totals">
            <h2>Cart totals</h2>
            <div class="total-row">
                <span>Subtotal</span>
                <span id="subtotal">₹<%= cartTotal.subtotal.toFixed(2) %></span>
            </div>
            <div class="total-row">
                <span>GST (18%)</span>
                <span id="tax">₹<%= cartTotal.tax.toFixed(2) %></span>
            </div>
            <div class="total-row">
                <span>Shipping</span>
                <span id="shipping">₹<%= cartTotal.shipping.toFixed(2) %></span>
            </div>
            <div class="total-row">
                <span>Discount</span>
                <span id="discount">-₹<%= cartTotal.discount.toFixed(2) %></span>
            </div>
            <div class="total-row final">
                <span>Total</span>
                <span id="total">₹<%= cartTotal.final.toFixed(2) %></span>
            </div>
            <button class="checkout-btn" onclick="checkout()">Proceed to checkout</button>
        </div>
    </div>
    <img style="width: 100vw;" src="/images/54815E6F-C058-446C-AD70-DF26744C9EFB.jpeg" alt="">
    <%- include("../../views/partials/user/footer") %>

        <script>
            let appliedCoupon = null;

            // Update item quantity using AJAX
            async function updateItemQuantity(productId, newQuantity) {
                try {
                    const response = await fetch('/updateCartQuantity', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            productId,
                            quantity: parseInt(newQuantity)
                        })
                    });

                    const data = await response.json();

                    if (data.status) {
                        // Update the item's subtotal
                        const itemElement = document.querySelector(`[data-id="${productId}"]`);
                        const subtotalElement = itemElement.querySelector('.subtotal');
                        subtotalElement.textContent = `₹${data.itemTotal.toFixed(2)}`;

                        // Update all totals
                        updateAllTotals(data.cartTotal);

                        // Update cart count in header
                        updateCartCount(data.cartCount);
                    } else {
                        if (data.stockError) {
                            Swal.fire('Warning!', data.message, 'warning');
                            location.reload();
                        }
                    }
                } catch (error) {
                    console.error('Error updating quantity:', error);
                    Swal.fire('Error!', 'Failed to update quantity', 'error');
                }
            }


            function updateAllTotals(cartTotal) {
                document.getElementById('subtotal').textContent = `₹${cartTotal.subtotal.toFixed(2)}`;
                document.getElementById('tax').textContent = `₹${cartTotal.tax.toFixed(2)}`;
                document.getElementById('shipping').textContent = `₹${cartTotal.shipping.toFixed(2)}`;
                document.getElementById('discount').textContent = `-₹${cartTotal.discount.toFixed(2)}`;
                document.getElementById('total').textContent = `₹${cartTotal.final.toFixed(2)}`;
            }

            // Remove item from cart using AJAX
            async function removeItem(productId) {
                try {
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    });

                    if (result.isConfirmed) {
                        const response = await fetch('/removeFromCart', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ productId })
                        });

                        const data = await response.json();

                        if (data.status) {
                            // Remove item element from DOM
                            const itemElement = document.querySelector(`[data-id="${productId}"]`);
                            itemElement.remove();

                            // Update all totals
                            updateAllTotals(data.cartTotal);

                            // Update cart count in header
                            updateCartCount(data.cartCount);

                            Swal.fire('Deleted!', 'Item has been removed from cart.', 'success');

                            // Check if cart is empty
                            if (data.cartCount === 0) {
                                location.reload();
                            }
                        } else {
                            Swal.fire('Error!', data.message, 'error');
                        }
                    }
                } catch (error) {
                    console.error('Error removing item:', error);
                    Swal.fire('Error!', 'Failed to remove item', 'error');
                }
            }
            // Update totals based on subtotal
            function updateTotals(subtotal) {
                const tax = subtotal * 0.18;
                const shipping = subtotal < 1000 ? 49 : 0;
                const discount = appliedCoupon ? (subtotal * appliedCoupon.discount) / 100 : 0;
                const total = subtotal + tax + shipping - discount;

                document.getElementById('tax').textContent = `₹${tax.toFixed(2)}`;
                document.getElementById('shipping').textContent = `₹${shipping.toFixed(2)}`;
                document.getElementById('discount').textContent = `-₹${discount.toFixed(2)}`;
                document.getElementById('total').textContent = `₹${total.toFixed(2)}`;
            }

            // Update cart count in header
            function updateCartCount(count) {
                const cartCountElement = document.querySelector('.cart-count');
                if (cartCountElement) {
                    cartCountElement.textContent = count;
                }
            }

            // Checkout function
            function checkout() {
                window.location.href = '/checkout';
            }


            // for humberger menu in mobile view
            document.addEventListener('DOMContentLoaded', function () {
                const hamburgerMenu = document.querySelector('.hamburger-menu');
                const mobileMenu = document.querySelector('.mobile-menu');

                hamburgerMenu.addEventListener('click', function () {
                    mobileMenu.classList.toggle('active');

                    // Toggle hamburger icon between menu and close
                    const icon = this.querySelector('.material-symbols-outlined');
                    if (mobileMenu.classList.contains('active')) {
                        icon.textContent = 'close';
                    } else {
                        icon.textContent = 'menu';
                    }
                });

                // Close mobile menu when clicking outside
                document.addEventListener('click', function (event) {
                    const isClickInsideNav = event.target.closest('.main-nav');
                    if (!isClickInsideNav && mobileMenu.classList.contains('active')) {
                        mobileMenu.classList.remove('active');
                        hamburgerMenu.querySelector('.material-symbols-outlined').textContent = 'menu';
                    }
                });

                // Close mobile menu when window is resized above mobile breakpoint
                window.addEventListener('resize', function () {
                    if (window.innerWidth > 768 && mobileMenu.classList.contains('active')) {
                        mobileMenu.classList.remove('active');
                        hamburgerMenu.querySelector('.material-symbols-outlined').textContent = 'menu';
                    }
                });
            });

        </script>


</body>

</html>