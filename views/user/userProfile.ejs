<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,300,0,0" />
    <link rel="stylesheet" href="/css/profileDetails.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
    <div class="menu-toggle">
        <i class="fas fa-bars" style="color: white;"></i>
    </div>

    <div class="container">
        <div class="sidebar">
            <div class="profile-info">
                <div class="profile-pic">
                    <i class="fas fa-user"></i>
                </div>
                <h3>
                    <%= user.name %>
                </h3>
                <p>
                    <%= user.email %>
                </p>
            </div>
            <ul class="nav-menu">
                <li class="nav-item active" data-section="dashboard">
                    <span class="material-symbols-outlined">home</span></i>Dashboard
                </li>
                <li class="nav-item" data-section="address">
                    <span class="material-symbols-outlined">location_on</span>My Address
                </li>
                <li class="nav-item" data-section="orders" id="timeline" name="timeline">
                    <span class="material-symbols-outlined">local_mall</span>Orders
                </li>
                <li class="nav-item" data-section="wallet">
                    <span class="material-symbols-outlined">account_balance_wallet</span>Wallet Status
                </li>
                <li class="nav-item" data-section="history">
                    <span class="material-symbols-outlined">history</span>Wallet History
                </li>
                <li class="nav-item" data-section="referrals">
                    <span class="material-symbols-outlined">group_add</span>Referrals
                </li>
                <a style="text-decoration: none; cursor: pointer;" href="#" onclick="handleLogout(event)">
                    <li class="nav-item" id="logout">
                        <span class="material-symbols-outlined">logout</span> Logout
                    </li>
                </a>
            </ul>
        </div>

        <div class="main-content">
            <div id="dashboard" class="content-section active">
                <h2 class="section-title">Dashboard</h2>
                <div class="dashboard-stats">
                    <h3>Welcome back, <%= user.name %>!</h3>
                    <p>Here's your account overview</p>
                </div>

                <div class="dashboard-grid">
                    <div class="profile-card">
                        <h3 class="section-title">Profile Details</h3>
                        <!-- form start -->
                        <form method="post" action="/changeUserDetails" class="profile-form" id="profileForm">
                            <div class="form-group">
                                <label for="username">Username</label>
                                <input type="text" id="username" name="name" value="<%= user.name %>" disabled>
                                <button type="button" class="edit-btn" data-field="username">
                                    <span class="material-symbols-outlined">
                                        edit
                                    </span>
                                </button>
                            </div>

                            <div class="form-group">
                                <label for="email">Email Address</label>
                                <input type="email" id="email" name="email" value=<%=user.email %> disabled>
                                <button type="button" class="edit-btn" data-field="email">
                                    <span class="material-symbols-outlined">
                                        edit
                                    </span>
                                </button>
                            </div>

                            <div class="form-group">
                                <label for="phone">Phone Number</label>
                                <input type="tel" id="phone" name="phone" value="<%= user.phone %>" disabled>
                                <button type="button" class="edit-btn" data-field="phone">
                                    <span class="material-symbols-outlined">
                                        edit
                                    </span>
                                </button>
                            </div>

                            <div class="action-buttons">
                                <button type="submit" class="btn" id="saveProfileBtn" style="display: none;">
                                    <span class="material-symbols-outlined">
                                        save
                                    </span> Save Changes
                                </button>
                                <button type="button" class="btn btn-secondary" id="changePasswordBtn">
                                    <i class="fas fa-lock"></i> Change Password
                                </button>
                            </div>
                        </form>
                        <!-- form end  -->



                        <form class="password-change-form" id="passwordForm">
                            <div class="form-group">
                                <label for="currentPassword">Current Password</label>
                                <input type="password" id="currentPassword" required>
                            </div>

                            <div class="form-group">
                                <label for="newPassword">New Password</label>
                                <input type="password" id="newPassword" required>
                            </div>

                            <div class="form-group">
                                <label for="confirmPassword">Confirm New Password</label>
                                <input type="password" id="confirmPassword" required>
                            </div>

                            <div class="action-buttons">
                                <button type="submit" class="btn">
                                    <i class="fas fa-key"></i> Update Password
                                </button>
                                <button type="button" class="btn btn-secondary" id="cancelPasswordBtn">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>


            <div id="address" class="content-section">
                <h2 class="section-title">My Address</h2>

                <!-- Saved Addresses Section -->
                <div class="saved-addresses">
                    <h3 class="sub-section-title">Saved Addresses</h3>
                    <div class="address-cards">
                        <% if(address && address.address) { %>
                            <% address.address.forEach((addr, index)=> { %>
                                <div class="address-card <%= addr.isDefault ? 'default-address' : '' %>"
                                    data-address-id="<%= addr._id %>">
                                    <div class="address-type">
                                        <%= addr.addressType %>
                                    </div>
                                    <div class="address-details">
                                        <p>
                                            <%= addr.name %>
                                        </p>
                                        <p>
                                            <%= addr.landMark %>
                                        </p>
                                        <p>
                                            <%= addr.city %>, <%= addr.state %>
                                                    <%= addr.pincode %>
                                        </p>
                                        <p>Phone: <%= addr.phone %>
                                        </p>
                                        <p>Alt Phone: <%= addr.altPhone %>
                                        </p>
                                    </div>
                                    <div class="address-actions">
                                        <button class="btn btn-delivery">
                                            <span class="material-symbols-outlined">local_shipping</span> Use for
                                            Delivery
                                        </button>
                                        <button class="btn btn-edit-address">
                                            <span class="material-symbols-outlined">edit</span> Edit
                                        </button>
                                        <button class="btn btn-delete">
                                            <span class="material-symbols-outlined">delete</span> Delete
                                        </button>
                                    </div>
                                </div>
                                <% }) %>
                                    <% } %>
                    </div>
                </div>

                <!-- Add/Edit Address Form -->
                <div class="address-form-container">
                    <h3 class="sub-section-title" id="formTitle">Add New Address</h3>
                    <form class="address-form" id="addressForm">
                        <input type="hidden" id="addressId" name="addressId" value="">

                        <div class="form-group">
                            <label for="addressType">Address Type</label>
                            <select id="addressType" name="addressType" class="form-input" required>
                                <option value="home">Home</option>
                                <option value="work">Work</option>
                                <option value="other">Other</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="name">Full Name</label>
                            <input type="text" id="name" name="name" class="form-input" required>
                        </div>

                        <div class="form-group">
                            <label for="landMark">Landmark/Street Address</label>
                            <input type="text" id="landMark" name="landMark" class="form-input" required>
                        </div>

                        <div class="form-grid">
                            <div class="form-group">
                                <label for="city">City</label>
                                <input type="text" id="city" name="city" class="form-input" required>
                            </div>

                            <div class="form-group">
                                <label for="state">State</label>
                                <input type="text" id="state" name="state" class="form-input" required>
                            </div>

                            <div class="form-group">
                                <label for="pincode">PIN Code</label>
                                <input type="text" id="pincode" name="pincode" class="form-input" required>
                            </div>
                        </div>

                        <div class="form-grid">
                            <div class="form-group">
                                <label for="phone">Phone Number</label>
                                <input type="tel" id="phone" name="phone" class="form-input" required>
                            </div>

                            <div class="form-group">
                                <label for="altPhone">Alternative Phone</label>
                                <input type="tel" id="altPhone" name="altPhone" class="form-input" required>
                            </div>
                        </div>

                        <div class="action-buttons">
                            <button type="submit" class="btn" id="saveAddressBtn">
                                <span class="material-symbols-outlined">save</span> Save Address
                            </button>
                            <button type="button" class="btn btn-secondary" id="cancelEditBtn" style="display: none;">
                                <span class="material-symbols-outlined">close</span> Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>




            <div id="orders" class="content-section otrack_body otrack_all_elements">
                <div class="otrack_container">
                    <h1 class="otrack_main_title">My Orders</h1>

                    <% if (orders && orders.length> 0) { %>
                        <% orders.forEach(order=> { %>
                            <div class="otrack_order_card">
                                <div class="otrack_order_header">
                                    <div>
                                        <span class="otrack_order_id">Order #<%= order.orderId.substring(0, 8) %></span>
                                        <p class="otrack_order_date">Ordered on <%= order.formattedDate %>
                                        </p>
                                    </div>
                                    <span class="otrack_order_status otrack_status_<%= order.status.toLowerCase() %>">
                                        <%= order.status %>
                                    </span>
                                </div>

                                <% if (order.orderItems && order.orderItems.length> 0) { %>
                                    <% order.orderItems.forEach((item, i)=> { %>
                                        <div class="otrack_product_item">
                                            <img src="<%= item.product.productImage[i] %>"
                                                alt="<%= item.product.name %>" class="otrack_product_img">
                                            <div class="otrack_product_info">
                                                <h3 class="otrack_product_title">
                                                    <%= item.product.name %>
                                                </h3>
                                                <p class="otrack_product_meta">Quantity: <%= item.quantity %> × ₹<%=
                                                            item.price.toLocaleString() %>
                                                </p>
                                            </div>
                                        </div>
                                        <% }); %>
                                            <% } %>

                                                <button class="otrack_view_order_btn"
                                                    onclick="otrackOpenModal('<%= order._id %>')">View Order
                                                    Details</button>
                                                <% if (order.status==="Pending" || order.status==="Processing" ) { %>
                                                    <button class="cancel">Cancel Order</button>
                                                    <% } %>
                                                        <% if(order.status==="Delivered" ){ %>
                                                            <button class="return"
                                                                onclick="openReturnModal('<%= order._id %>')">Return
                                                                Request</button>
                                                            <% } %>

                            </div>

                            <!-- Modal for this order -->
                            <div class="otrack_modal_wrapper" id="otrackOrderDetailModal_<%= order._id %>">
                                <div class="otrack_modal_content_box">
                                    <div class="otrack_modal_header">
                                        <h2 class="otrack_modal_title">Order Details</h2>
                                        <button class="otrack_close_modal_btn"
                                            onclick="otrackCloseModal('<%= order._id %>')">&times;</button>
                                    </div>
                                    <div class="otrack_order_details_container">
                                        <h3 class="otrack_order_details_title">Order #<%= order.orderId %>
                                        </h3>
                                        <p class="otrack_order_details_text">Ordered on <%= order.formattedDate %>
                                        </p>
                                        <p class="otrack_order_details_text">
                                            <span
                                                style="display: inline-block; padding: 3px 10px; background: #fff3cd; color: #b07d1a; border-radius: 20px; font-size: 13px; font-weight: 500;">
                                                Status: <%= order.status %>
                                            </span>
                                        </p>
                                        <p class="otrack_order_details_text">Payment Method: <%=
                                                order.paymentMethod.toUpperCase() %>
                                        </p>
                                    </div>
                                    <div class="otrack_address_container">
                                        <h3 class="otrack_address_title">Delivery Address</h3>
                                        <p class="otrack_address_text"><strong>
                                                <%= order.address.fullName %>
                                            </strong></p>
                                        <p class="otrack_address_text">
                                            <%= order.address.address %>
                                        </p>
                                        <p class="otrack_address_text">
                                            <%= order.address.city %>, <%= order.address.state %> - <%=
                                                        order.address.pincode %>
                                        </p>
                                        <p class="otrack_address_text"><strong>Mobile:</strong>
                                            <%= order.address.mobile %>
                                        </p>
                                    </div>
                                    <div class="otrack_price_summary">
                                        <div class="otrack_price_row">
                                            <span class="otrack_price_label">Total Price:</span>
                                            <span class="otrack_price_value">₹<%= order.totalPrice.toLocaleString() %>
                                            </span>
                                        </div>
                                        <div class="otrack_price_row">
                                            <span class="otrack_price_label">Discount:</span>
                                            <span class="otrack_price_value">₹<%= order.discount.toLocaleString() %>
                                            </span>
                                        </div>
                                        <div class="otrack_price_row">
                                            <span class="otrack_price_label">Tax:</span>
                                            <span class="otrack_price_value">₹<%= (order.finalAmount - order.totalPrice
                                                    + order.discount).toLocaleString() %></span>
                                        </div>
                                        <div class="otrack_price_row">
                                            <span class="otrack_final_price_label">Final Amount:</span>
                                            <span class="otrack_final_price_value">₹<%=
                                                    order.finalAmount.toLocaleString() %></span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Cancel Order Modal -->
                            <div class="otrack_modal_wrapper" id="cancelOrderModal_<%= order._id %>">
                                <div class="otrack_modal_content_box">
                                    <div class="otrack_modal_header">
                                        <h2 class="otrack_modal_title">Cancel Order</h2>
                                        <button class="otrack_close_modal_btn"
                                            onclick="closeCancelModal('<%= order._id %>')">&times;</button>
                                    </div>
                                    <div class="otrack_cancel_container">
                                        <p class="otrack_cancel_info">Are you sure you want to cancel order #<%=
                                                order.orderId.substring(0, 8) %>?</p>

                                        <form id="cancelOrderForm_<%= order._id %>" class="otrack_cancel_form">
                                            <input type="hidden" name="orderId" value="<%= order._id %>">

                                            <div class="otrack_form_group">
                                                <label class="otrack_form_label">Reason for cancellation</label>
                                                <select name="cancelReason" class="otrack_select_input" required>
                                                    <option value="" disabled selected>Select a reason</option>
                                                    <option value="Changed my mind">Changed my mind</option>
                                                    <option value="Found better price elsewhere">Found better price
                                                        elsewhere</option>
                                                    <option value="Ordered by mistake">Ordered by mistake</option>
                                                    <option value="Shipping takes too long">Shipping takes too long
                                                    </option>
                                                    <option value="Payment issues">Payment issues</option>
                                                    <option value="Other">Other</option>
                                                </select>
                                            </div>

                                            <div class="otrack_form_group" id="otherReasonGroup_<%= order._id %>"
                                                style="display: none;">
                                                <label class="otrack_form_label">Please specify</label>
                                                <textarea name="otherReason" class="otrack_textarea" rows="3"
                                                    placeholder="Please provide details..."></textarea>
                                            </div>

                                            <div class="otrack_form_group">
                                                <label class="otrack_form_label">Additional comments (optional)</label>
                                                <textarea name="comments" class="otrack_textarea" rows="3"
                                                    placeholder="Any additional information..."></textarea>
                                            </div>

                                            <div class="otrack_cancel_actions">
                                                <button type="button" class="otrack_cancel_btn_secondary"
                                                    onclick="closeCancelModal('<%= order._id %>')">Keep My
                                                    Order</button>
                                                <button type="submit" class="otrack_cancel_btn_primary">Confirm
                                                    Cancellation</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>


                            <div class="otrack_modal_wrapper" id="returnOrderModal_<%= order._id %>">
                                <div class="otrack_modal_content_box">
                                    <div class="otrack_modal_header">
                                        <h2 class="otrack_modal_title">Return Request</h2>
                                        <button class="otrack_close_modal_btn"
                                            onclick="closeReturnModal('<%= order._id %>')">&times;</button>
                                    </div>
                                    <div class="otrack_return_container">
                                        <p class="otrack_return_info">Submit a return request for order #<%=
                                                order.orderId.substring(0, 8) %>
                                        </p>

                                        <form id="returnOrderForm_<%= order._id %>" class="otrack_return_form"
                                            enctype="multipart/form-data">
                                            <input type="hidden" name="orderId" value="<%= order._id %>">

                                            <div class="otrack_form_group">
                                                <label class="otrack_form_label">Reason for Return</label>
                                                <select name="returnReason" class="otrack_select_input" required>
                                                    <option value="" disabled selected>Select a reason</option>
                                                    <option value="Defective/Damaged Product">Defective/Damaged Product
                                                    </option>
                                                    <option value="Wrong Item Received">Wrong Item Received</option>
                                                    <option value="Size/Fit Issue">Size/Fit Issue</option>
                                                    <option value="Quality Issue">Quality Issue</option>
                                                    <option value="Not as Described">Not as Described</option>
                                                    <option value="Other">Other</option>
                                                </select>
                                            </div>

                                            <div class="otrack_form_group" id="returnOtherReasonGroup_<%= order._id %>"
                                                style="display: none;">
                                                <label class="otrack_form_label">Please specify</label>
                                                <textarea name="otherReason" class="otrack_textarea" rows="3"
                                                    placeholder="Please provide details..."></textarea>
                                            </div>

                                            <div class="otrack_form_group" id="returnProofImages_<%= order._id %>">
                                                <label class="otrack_form_label">Upload Images (Optional)</label>
                                                <p class="otrack_help_text">Upload photos showing the issue with the
                                                    product (max 3 images)</p>
                                                <input type="file" name="proofImages" class="return_image_upload"
                                                    multiple accept="image/*" max="3">
                                                <div class="return_image_preview_container"></div>
                                            </div>

                                            <div class="otrack_form_group">
                                                <label class="otrack_form_label">Additional comments</label>
                                                <textarea name="comments" class="otrack_textarea" rows="3"
                                                    placeholder="Any additional information..."></textarea>
                                            </div>

                                            <div class="otrack_return_notice">
                                                <p><strong>Note:</strong> Once your return request is approved, we'll
                                                    arrange for pickup of the item from your delivery address. Please
                                                    ensure the product is in its original packaging with all
                                                    accessories.</p>
                                            </div>

                                            <div class="otrack_return_actions">
                                                <button type="button" class="otrack_return_btn_secondary"
                                                    onclick="closeReturnModal('<%= order._id %>')">Cancel</button>
                                                <button type="submit" class="otrack_return_btn_primary">Submit Return
                                                    Request</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>


                            <% }); %>
                                <% } else { %>
                                    <div class="otrack_empty_state">
                                        <p>You haven't placed any orders yet.</p>
                                    </div>
                                    <% } %>
                </div>
            </div>

            <div id="wallet" class="content-section">
                <h2 class="section-title">Wallet Status</h2>
                <div class="wallet-balance">
                    <p>Current Balance</p>
                    <div class="wallet-amount">$1,250.00</div>
                </div>
                <button class="btn">
                    <i class="fas fa-plus"></i>Add Money
                </button>
            </div>

            <div id="history" class="content-section">
                <h2 class="section-title">Wallet History</h2>
                <ul class="transaction-list">
                    <li class="transaction-item">
                        <span><i class="fas fa-plus-circle"></i> Added Money</span>
                        <span style="color: #27ae60">+$500.00</span>
                    </li>
                    <li class="transaction-item">
                        <span><i class="fas fa-minus-circle"></i> Purchase</span>
                        <span style="color: #e74c3c">-$250.00</span>
                    </li>
                </ul>
            </div>

            <div id="referrals" class="content-section">
                <h2 class="section-title">Referrals</h2>
                <div class="referral-code">
                    <p>Your Referral Code:</p>
                    <h3>USER123</h3>
                </div>
                <p>Total Referrals: 5</p>
                <p>Earnings from Referrals: $50.00</p>
            </div>
        </div>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            const editButtons = document.querySelectorAll('.edit-btn');
            const saveProfileBtn = document.getElementById('saveProfileBtn');
            const profileForm = document.getElementById('profileForm');

            let activeFields = new Set();

            // Handle edit buttons
            editButtons.forEach(btn => {
                btn.addEventListener('click', function () {
                    const field = this.dataset.field;
                    const input = document.getElementById(field);

                    if (input.disabled) {
                        input.disabled = false;
                        input.focus();
                        activeFields.add(field);
                        this.querySelector('.material-symbols-outlined').textContent = 'close';
                    } else {
                        input.disabled = true;
                        activeFields.delete(field);
                        this.querySelector('.material-symbols-outlined').textContent = 'edit';
                        input.value = input.defaultValue; // Reset value
                    }

                    saveProfileBtn.style.display = activeFields.size > 0 ? 'block' : 'none';
                });
            });

            // Handle profile form submission
            profileForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Temporarily enable disabled fields for form submission
                const inputs = profileForm.querySelectorAll('input[disabled]');
                inputs.forEach(input => input.disabled = false);

                try {
                    const formData = new FormData(profileForm);
                    const response = await fetch('/changeUserDetails', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(Object.fromEntries(formData))
                    });

                    const result = await response.json();

                    if (response.ok) {
                        // Success: Disable inputs and reset edit buttons
                        editButtons.forEach(btn => {
                            const field = btn.dataset.field;
                            const input = document.getElementById(field);
                            input.disabled = true;
                            btn.querySelector('.material-symbols-outlined').textContent = 'edit';
                            input.defaultValue = input.value; // Update default value
                        });

                        activeFields.clear();
                        saveProfileBtn.style.display = 'none';

                        // Show success alert
                        Swal.fire({
                            icon: 'success',
                            title: 'Profile Updated!',
                            text: result.success,
                            confirmButtonColor: ''
                        }).then(() => {
                            window.location.reload(); // Refresh page to show updated data
                        });

                    } else {
                        // Show specific error messages
                        Swal.fire({
                            icon: 'error',
                            title: 'Update Failed',
                            text: result.error,
                            confirmButtonColor: ''
                        });
                    }
                } catch (error) {
                    console.error('Error updating profile:', error);

                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: 'Something went wrong. Please try again.',
                        confirmButtonColor: ''
                    });
                } finally {
                    inputs.forEach(input => input.disabled = true);
                }
            });
        });



        document.addEventListener('DOMContentLoaded', function () {
            const passwordForm = document.getElementById('passwordForm');
            const changePasswordBtn = document.getElementById('changePasswordBtn');
            const profileForm = document.querySelector('.profile-form');



            const handlePasswordChange = async (currentPassword, newPassword) => {
                try {
                    const response = await fetch('/changePassword', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            currentPassword,
                            newPassword
                        })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.error || 'Failed to change password');
                    }

                    return data;
                } catch (error) {
                    throw error;
                }
            };

            // Initially hide the password form
            passwordForm.style.display = 'none';


            passwordForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                // Client-side validation
                if (!currentPassword || !newPassword || !confirmPassword) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Missing Fields',
                        text: 'Please fill in all password fields',
                        confirmButtonColor: '#6E0B21'
                    });
                    return;
                }

                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Passwords Do Not Match',
                        text: 'New password and confirm password must match',
                        confirmButtonColor: '#6E0B21'
                    });
                    return;
                }

                if (newPassword.length < 8) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Password Too Short',
                        text: 'Password must be at least 8 characters long',
                        confirmButtonColor: '#6E0B21'
                    });
                    return;
                }

                try {
                    await handlePasswordChange(currentPassword, newPassword);

                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Password changed successfully',
                        confirmButtonColor: '#6E0B21'
                    }).then(() => {
                        // Reset form and return to profile view
                        passwordForm.reset();
                        passwordForm.style.display = 'none';
                        document.querySelector('.profile-form').style.display = 'block';
                    });
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to change password',
                        confirmButtonColor: '#6E0B21'
                    });
                }
            });


            // Show OTP verification when clicking change password button
            changePasswordBtn.addEventListener('click', async function () {
                try {
                    // Get user's email from the profile form
                    const userEmail = document.getElementById('email').value;

                    // First request OTP
                    const response = await fetch('/changePassOtp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email: userEmail })
                    });

                    if (response.ok) {
                        // Show OTP verification dialog
                        Swal.fire({
                            title: 'Enter OTP',
                            text: 'Please enter the OTP sent to your email',
                            input: 'text',
                            inputAttributes: {
                                autocapitalize: 'off',
                                maxlength: 6
                            },
                            showCancelButton: true,
                            confirmButtonText: 'Verify',
                            confirmButtonColor: '#6E0B21',
                            cancelButtonColor: '#6c757d',
                            showLoaderOnConfirm: true,
                            preConfirm: async (otp) => {
                                try {
                                    const verifyResponse = await fetch('/verifyChangePassOtp', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({ otp })
                                    });

                                    if (!verifyResponse.ok) {
                                        throw new Error('Invalid OTP');
                                    }

                                    return verifyResponse.json();
                                } catch (error) {
                                    Swal.showValidationMessage(`Verification failed: ${error}`);
                                }
                            },
                            allowOutsideClick: () => !Swal.isLoading()
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // If OTP is verified, show password change form
                                profileForm.style.display = 'none';
                                passwordForm.style.display = 'block';
                                passwordForm.reset();
                            }
                        });
                    } else {
                        throw new Error('Failed to send OTP');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to initiate password change. Please try again.',
                        confirmButtonColor: '#6E0B21'
                    });
                }
            });

            // Handle password form submission
            passwordForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                // Validation
                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Passwords Do Not Match',
                        text: 'New password and confirm password must match.',
                        confirmButtonColor: '#6E0B21'
                    });
                    return;
                }

                if (newPassword.length < 8) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Password Too Short',
                        text: 'New password must be at least 8 characters long.',
                        confirmButtonColor: '#6E0B21'
                    });
                    return;
                }

                try {
                    const response = await fetch('/changePassword', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            currentPassword,
                            newPassword,
                            confirmPassword
                        })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Password Updated!',
                            text: 'Your password has been changed successfully.',
                            confirmButtonColor: '#6E0B21'
                        }).then(() => {
                            passwordForm.reset();
                            passwordForm.style.display = 'none';
                            profileForm.style.display = 'block';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Update Failed',
                            text: result.error || 'Failed to update password. Please try again.',
                            confirmButtonColor: '#6E0B21'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: 'Something went wrong. Please try again.',
                        confirmButtonColor: '#6E0B21'
                    });
                }
            });

            // Add cancel button handler
            document.getElementById('cancelPasswordBtn').addEventListener('click', function () {
                passwordForm.style.display = 'none';
                profileForm.style.display = 'block';
                passwordForm.reset();
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const addressForm = document.getElementById('addressForm');
            const formTitle = document.getElementById('formTitle');
            const cancelEditBtn = document.getElementById('cancelEditBtn');
            const addressIdInput = document.getElementById('addressId');

            // Handle edit button clicks
            document.querySelectorAll('.btn-edit-address').forEach(button => {
                button.addEventListener('click', function () {
                    const addressCard = this.closest('.address-card');
                    const addressId = addressCard.dataset.addressId;
                    addressIdInput.value = addressId;

                    const addressDetails = {
                        type: addressCard.querySelector('.address-type').textContent,
                        name: addressCard.querySelector('.address-details p:nth-child(1)').textContent,
                        landmark: addressCard.querySelector('.address-details p:nth-child(2)').textContent,
                        cityStateZip: addressCard.querySelector('.address-details p:nth-child(3)').textContent,
                        phone: addressCard.querySelector('.address-details p:nth-child(4)').textContent.replace('Phone: ', ''),
                        altPhone: addressCard.querySelector('.address-details p:nth-child(5)').textContent.replace('Alt Phone: ', '')
                    };

                    // Populate form
                    document.getElementById('addressType').value = addressDetails.type.toLowerCase();
                    document.getElementById('name').value = addressDetails.name;
                    document.getElementById('landMark').value = addressDetails.landmark;
                    const [city, stateZip] = addressDetails.cityStateZip.split(', ');
                    const [state, pincode] = stateZip.split(' ');
                    document.getElementById('city').value = city;
                    document.getElementById('state').value = state;
                    document.getElementById('pincode').value = pincode;
                    document.getElementById('phone').value = addressDetails.phone;
                    document.getElementById('altPhone').value = addressDetails.altPhone;

                    formTitle.textContent = 'Edit Address';
                    cancelEditBtn.style.display = 'block';
                    addressForm.scrollIntoView({ behavior: 'smooth' });
                });
            });

            // Handle cancel edit
            cancelEditBtn.addEventListener('click', function () {
                addressForm.reset();
                addressIdInput.value = '';
                formTitle.textContent = 'Add New Address';
                this.style.display = 'none';
            });

            // Handle form submission
            addressForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                const formData = {
                    addressType: document.getElementById('addressType').value,
                    name: document.getElementById('name').value,
                    city: document.getElementById('city').value,
                    landMark: document.getElementById('landMark').value,
                    state: document.getElementById('state').value,
                    pincode: document.getElementById('pincode').value,
                    phone: document.getElementById('phone').value,
                    altPhone: document.getElementById('altPhone').value,
                    addressId: addressIdInput.value || null
                };

                try {
                    const response = await fetch('/addOrEditAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Saved!',
                            text: result.message,
                            confirmButtonColor: '#6E0B21'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error('Failed to save address');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'Failed to save address. Please try again.',
                        confirmButtonColor: '#6E0B21'
                    });
                }
            });

            // Handle delete address
            document.querySelectorAll('.btn-delete').forEach(button => {
                button.addEventListener('click', async function () {
                    const addressId = this.closest('.address-card').dataset.addressId;
                    const result = await Swal.fire({
                        title: 'Delete Address?',
                        text: 'Are you sure you want to delete this address?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#6E0B21',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, delete it!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/deleteAddress/${addressId}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                this.closest('.address-card').remove();
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: 'Address has been deleted.',
                                    confirmButtonColor: '#6E0B21'
                                });
                            } else {
                                throw new Error('Failed to delete address');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: 'Failed to delete address. Please try again.',
                                confirmButtonColor: '#6E0B21'
                            });
                        }
                    }
                });
            });

            // Handle "Use for Delivery" button
            document.querySelectorAll('.btn-delivery').forEach(button => {
                button.addEventListener('click', async function () {
                    const addressId = this.closest('.address-card').dataset.addressId;

                    try {
                        const response = await fetch('/setDefaultAddress', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ addressId })
                        });

                        if (response.ok) {
                            // Remove default-address class from all cards
                            document.querySelectorAll('.address-card').forEach(card => {
                                card.classList.remove('default-address');
                            });

                            // Add default-address class to selected card
                            this.closest('.address-card').classList.add('default-address');

                            Swal.fire({
                                icon: 'success',
                                title: 'Default Address Set!',
                                text: 'This address will be used for delivery',
                                confirmButtonColor: '#6E0B21'
                            });
                        } else {
                            throw new Error('Failed to set default address');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to set default address. Please try again.',
                            confirmButtonColor: '#6E0B21'
                        });
                    }
                });
            });

            // Form validation
            const validateForm = () => {
                const phone = document.getElementById('phone').value;
                const altPhone = document.getElementById('altPhone').value;
                const pincode = document.getElementById('pincode').value;

                // Phone number validation (10 digits)
                const phoneRegex = /^\d{10}$/;
                if (!phoneRegex.test(phone) || !phoneRegex.test(altPhone)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Phone Number',
                        text: 'Please enter valid 10-digit phone numbers',
                        confirmButtonColor: '#6E0B21'
                    });
                    return false;
                }

                // Pincode validation (6 digits)
                const pincodeRegex = /^\d{6}$/;
                if (!pincodeRegex.test(pincode)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid PIN Code',
                        text: 'Please enter a valid 6-digit PIN code',
                        confirmButtonColor: '#6E0B21'
                    });
                    return false;
                }

                return true;
            };

            // Add form validation before submission
            addressForm.addEventListener('submit', function (e) {
                if (!validateForm()) {
                    e.preventDefault();
                }
            });
        });


        document.addEventListener('DOMContentLoaded', function () {
            const navItems = document.querySelectorAll('.nav-item');
            const contentSections = document.querySelectorAll('.content-section');
            const menuToggle = document.querySelector('.menu-toggle');
            const sidebar = document.querySelector('.sidebar');

            // Mobile menu toggle
            menuToggle.addEventListener('click', function () {
                sidebar.classList.toggle('active');
            });

            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', function (e) {
                if (window.innerWidth <= 768) {
                    if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
                        sidebar.classList.remove('active');
                    }
                }
            });

            // Navigation handling
            navItems.forEach(item => {
                item.addEventListener('click', function () {
                    if (this.id === 'logout') {
                        handleLogout();
                        return;
                    }

                    navItems.forEach(nav => nav.classList.remove('active'));
                    contentSections.forEach(section => section.classList.remove('active'));

                    this.classList.add('active');

                    const sectionId = this.dataset.section;
                    document.getElementById(sectionId).classList.add('active');

                    // Close sidebar on mobile after navigation
                    if (window.innerWidth <= 768) {
                        sidebar.classList.remove('active');
                    }
                });
            });


            function handleLogout(event) {

                Swal.fire({
                    title: "Are you sure?",
                    text: "You will be logged out of your account.",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#6E0B21",
                    cancelButtonColor: "#6c757d",
                    confirmButtonText: "Yes, logout"
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            icon: "success",
                            title: "Logged Out!",
                            text: "You have been logged out successfully.",
                            confirmButtonColor: "#6E0B21"
                        }).then(() => {
                            window.location.href = "/logout";
                        });
                    }
                });
            }


            const addressForm = document.querySelector('.address-form');
            addressForm.addEventListener('submit', function (e) {
                e.preventDefault();
                alert('Address saved successfully!');
            });
        });





        function otrackOpenModal(orderId) {
            const modal = document.getElementById('otrackOrderDetailModal_' + orderId);
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';

            // Add active class after a small delay to trigger animations
            setTimeout(() => {
                modal.classList.add('otrack_modal_active');
            }, 10);
        }


        function otrackCloseModal(orderId) {
            const modal = document.getElementById('otrackOrderDetailModal_' + orderId);
            modal.classList.remove('otrack_modal_active');

            // Wait for animation to finish before hiding
            setTimeout(() => {
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }, 300);
        }

        // Close modal when clicking outside
        document.addEventListener('click', function (event) {
            const modals = document.querySelectorAll('.otrack_modal_wrapper');
            modals.forEach(modal => {
                if (event.target === modal) {
                    const orderId = modal.id.replace('otrackOrderDetailModal_', '');
                    otrackCloseModal(orderId);
                }
            });
        });






        // JavaScript for Cancel Order functionality
        document.addEventListener('DOMContentLoaded', function () {
            // Add event listeners to all cancel buttons
            const cancelButtons = document.querySelectorAll('.cancel');
            cancelButtons.forEach(button => {
                // Get the order id from the closest parent element with order data
                const orderCard = button.closest('.otrack_order_card');
                const orderIdElement = orderCard.querySelector('.otrack_order_id');
                const viewDetailsBtn = orderCard.querySelector('.otrack_view_order_btn');
                const orderId = viewDetailsBtn.getAttribute('onclick').match(/'([^']+)'/)[1];

                button.addEventListener('click', function () {
                    openCancelModal(orderId);
                });
            });

            // Set up reason dropdown change handlers for all forms
            document.querySelectorAll('[id^=cancelOrderForm_]').forEach(form => {
                const orderId = form.id.replace('cancelOrderForm_', '');
                const reasonSelect = form.querySelector('select[name="cancelReason"]');
                const otherReasonGroup = document.getElementById(`otherReasonGroup_${orderId}`);

                reasonSelect.addEventListener('change', function () {
                    if (this.value === 'Other') {
                        otherReasonGroup.style.display = 'block';
                        otherReasonGroup.querySelector('textarea').setAttribute('required', true);
                    } else {
                        otherReasonGroup.style.display = 'none';
                        otherReasonGroup.querySelector('textarea').removeAttribute('required');
                    }
                });

                // Set up form submission
                form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitCancelOrder(orderId, form);
                });
            });
        });

        // Function to open the cancel order modal
        function openCancelModal(orderId) {
            const modal = document.getElementById(`cancelOrderModal_${orderId}`);
            if (modal) {
                modal.style.display = 'flex';
                setTimeout(() => {
                    modal.classList.add('otrack_modal_active');
                }, 10);
            }
        }

        // Function to close the cancel order modal
        function closeCancelModal(orderId) {
            const modal = document.getElementById(`cancelOrderModal_${orderId}`);
            if (modal) {
                modal.classList.remove('otrack_modal_active');
                setTimeout(() => {
                    modal.style.display = 'none';
                }, 300);
            }
        }

        // Function to handle the cancel order form submission
        function submitCancelOrder(orderId, form) {
            // Show confirmation animation
            const modalContent = form.closest('.otrack_modal_content_box');
            modalContent.classList.add('cancel_confirm_animation');

            // Get form data
            const formData = new FormData(form);
            const cancelReason = formData.get('cancelReason');
            const otherReason = formData.get('otherReason');
            const comments = formData.get('comments');

            // Prepare data for API
            const data = {
                orderId: formData.get('orderId'),
                reason: cancelReason === 'Other' ? otherReason : cancelReason,
                additionalComments: comments
            };

            // Send cancellation request to server
            fetch('/orders/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        // Show success message
                        form.innerHTML = `
                <div class="otrack_success_message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="otrack_success_icon">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                    <h3>Order Cancelled Successfully</h3>
                    <p>Your order has been cancelled. You will receive a confirmation email shortly.</p>
                    <button type="button" class="otrack_done_btn" onclick="window.location.reload()">Done</button>
                </div>
            `;
                    } else {
                        // Show error message
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'otrack_error_message';
                        errorDiv.textContent = result.message || 'Failed to cancel order. Please try again.';
                        form.prepend(errorDiv);

                        // Remove animation class
                        modalContent.classList.remove('cancel_confirm_animation');
                    }
                })
                .catch(error => {
                    console.error('Error cancelling order:', error);

                    // Show error message
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'otrack_error_message';
                    errorDiv.textContent = 'Network error. Please try again later.';
                    form.prepend(errorDiv);

                    // Remove animation class
                    modalContent.classList.remove('cancel_confirm_animation');
                });
        }

        // Function to open the order details modal (copied from existing code)
        function otrackOpenModal(orderId) {
            const modal = document.getElementById(`otrackOrderDetailModal_${orderId}`);
            if (modal) {
                modal.style.display = 'flex';
                setTimeout(() => {
                    modal.classList.add('otrack_modal_active');
                }, 10);
            }
        }

        // Function to close the order details modal (copied from existing code)
        function otrackCloseModal(orderId) {
            const modal = document.getElementById(`otrackOrderDetailModal_${orderId}`);
            if (modal) {
                modal.classList.remove('otrack_modal_active');
                setTimeout(() => {
                    modal.style.display = 'none';
                }, 300);
            }
        }


        // Return Order Modal Function
        function openReturnModal(orderId) {
            const modal = document.getElementById(`returnOrderModal_${orderId}`);
            if (modal) {
                modal.style.display = 'flex';
                setTimeout(() => {
                    modal.classList.add('otrack_modal_active');
                }, 10);
            }
        }

        // Function to close the return order modal
        function closeReturnModal(orderId) {
            const modal = document.getElementById(`returnOrderModal_${orderId}`);
            if (modal) {
                modal.classList.remove('otrack_modal_active');
                setTimeout(() => {
                    modal.style.display = 'none';
                }, 300);
            }
        }

        // JavaScript for Return Order functionality
        document.addEventListener('DOMContentLoaded', function () {
            // Add event listeners to all return buttons
            const returnButtons = document.querySelectorAll('.return');
            returnButtons.forEach(button => {
                // Get the order id from the onclick attribute
                const orderId = button.getAttribute('onclick').match(/'([^']+)'/)[1];

                button.addEventListener('click', function () {
                    openReturnModal(orderId);
                });
            });

            // Set up reason dropdown change handlers for all return forms
            document.querySelectorAll('[id^=returnOrderForm_]').forEach(form => {
                const orderId = form.id.replace('returnOrderForm_', '');
                const reasonSelect = form.querySelector('select[name="returnReason"]');
                const otherReasonGroup = document.getElementById(`returnOtherReasonGroup_${orderId}`);
                const uploadGroup = document.getElementById(`returnProofImages_${orderId}`);

                reasonSelect.addEventListener('change', function () {
                    if (this.value === 'Other') {
                        otherReasonGroup.style.display = 'block';
                        otherReasonGroup.querySelector('textarea').setAttribute('required', true);
                    } else {
                        otherReasonGroup.style.display = 'none';
                        otherReasonGroup.querySelector('textarea').removeAttribute('required');
                    }
                });

                // Set up form submission
                form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitReturnRequest(orderId, form);
                });
            });

            // Setup image preview functionality
            document.querySelectorAll('.return_image_upload').forEach(input => {
                input.addEventListener('change', function (e) {
                    const previewContainer = this.nextElementSibling;
                    previewContainer.innerHTML = '';

                    if (this.files) {
                        for (let i = 0; i < this.files.length; i++) {
                            const file = this.files[i];
                            if (!file.type.match('image.*')) continue;

                            const reader = new FileReader();
                            reader.onload = function (e) {
                                const img = document.createElement('img');
                                img.src = e.target.result;
                                img.className = 'return_image_preview';
                                previewContainer.appendChild(img);
                            }
                            reader.readAsDataURL(file);
                        }
                    }
                });
            });
        });

        // Function to handle the return order form submission
        function submitReturnRequest(orderId, form) {
            // Show loading animation
            const modalContent = form.closest('.otrack_modal_content_box');
            modalContent.classList.add('return_confirm_animation');

            // Create FormData object for file uploads
            const formData = new FormData(form);

            // Make sure orderId is included in the form data
            if (!formData.has('orderId')) {
                formData.append('orderId', orderId);
            }

            // Send return request to server
            fetch('/orders/return', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin' // Include cookies for authentication
            })
                .then(response => {
                    // Check if the response is valid JSON before parsing
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json().then(data => ({
                            ok: response.ok,
                            data: data
                        }));
                    } else {
                        // If not JSON, handle as error
                        return response.text().then(text => {
                            console.error('Received non-JSON response:', text.substring(0, 100) + '...');
                            throw new Error('Received invalid response from server');
                        });
                    }
                })
                .then(result => {
                    // Remove animation class
                    modalContent.classList.remove('return_confirm_animation');

                    if (result.ok && result.data.success) {
                        // Show success message
                        form.innerHTML = `
                <div class="otrack_success_message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="otrack_success_icon">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                    <h3>Return Request Submitted</h3>
                    <p>Your return request has been submitted successfully. We'll review it and get back to you soon.</p>
                    <button type="button" class="otrack_done_btn" onclick="window.location.reload()">Done</button>
                </div>
            `;
                    } else {
                        // Show error message
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'otrack_error_message';
                        errorDiv.textContent = (result.data && result.data.message) || 'Failed to submit return request. Please try again.';
                        form.prepend(errorDiv);
                    }
                })
                .catch(error => {
                    console.error('Error submitting return request:', error);

                    // Remove animation class
                    modalContent.classList.remove('return_confirm_animation');

                    // Show error message
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'otrack_error_message';
                    errorDiv.textContent = 'Network error. Please try again later. If this persists, please try refreshing the page.';
                    form.prepend(errorDiv);
                });
        }

    </script>
</body>

</html>