<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="/css/checkOut.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.all.min.js"></script>
</head>
<body>
    <header class="header">
        <img src="/public/images/Fiora1/2.png" style="margin: -30px; margin-left: 50px; width: 70px;" alt="Logo" class="logo">
    </header>

    <div class="container">
        <main>
            <div class="checkout-section">
                <div class="section-header">
                    <h2 class="section-title">1. DELIVERY ADDRESS</h2>
                    <span class="toggle">▼</span>
                </div>
                <div class="section-content">
                    <div id="addressContainer">
                        <div class="address-list">
                            <% if (addresses && addresses.length > 0) { %>
                                <% addresses.forEach(addr => { %>
                                    <div class="address-card <%= addr.isDefault ? 'selected' : '' %>" data-id="<%= addr._id %>">
                                        <h3><%= addr.name %></h3>
                                        <p><%= addr.landMark %></p>
                                        <p><%= addr.city %>, <%= addr.state %> - <%= addr.pincode %></p>
                                        <p>Phone: <%= addr.phone %></p>
                                        <p>Alt Phone: <%= addr.altPhone %></p>
                                        <p>Type: <%= addr.addressType %></p>
                                        <div class="address-actions">
                                            <button onclick="setDefaultAddress('<%= addr._id %>')" <%= addr.isDefault ? 'disabled' : '' %>>
                                                <%= addr.isDefault ? 'Default Address' : 'Set as Default' %>
                                            </button>
                                            <button onclick="editAddress('<%= addr._id %>')">Edit</button>
                                            <button onclick="deleteAddress('<%= addr._id %>')">Delete</button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p>No addresses found. Please add a new address.</p>
                            <% } %>
                        </div>
                        <div class="add-address-container">
                            <button class="add-address-btn">+ Add New Address</button>
                        </div>
                    </div>
                    
                </div>
            </div>

            <!-- Payment section remains the same -->
            <div class="checkout-section">
                <div class="section-header">
                    <h2 class="section-title">2. PAYMENT METHOD</h2>
                    <span class="toggle">▼</span>
                </div>
                <div class="section-content">
                    <div class="payment-method">
                        <input type="radio" name="payment" id="cod">
                        <label for="cod">Cash on Delivery</label>
                    </div>
                    <div class="payment-method">
                        <input type="radio" name="payment" id="razorpay">
                        <label for="razorpay">Razorpay</label>
                    </div>
                    <div class="payment-method">
                        <input type="radio" name="payment" id="paypal">
                        <label for="paypal">PayPal</label>
                    </div>
                    <div class="payment-method">
                        <input type="radio" name="payment" id="upi">
                        <label for="upi">UPI Payment</label>
                    </div>
                </div>
            </div>
        </main>

        <aside>
            <div class="cart-summary">
                <div class="cart-header">
                    <h2 class="section-title">IN YOUR BAG</h2>
                    <button class="close-cart">×</button>
                </div>

                <% cartItems.forEach(item => { %>
                    <div class="product-info">
                        <img src="<%= item.image %>" alt="<%= item.name %>" class="product-img">
                        <div>
                            <h3><%= item.name %></h3>
                            <p>Qty: <%= item.quantity %> × ₹<%= item.price %></p>
                        </div>
                    </div>
                <% }); %>
                <div class="summary-row">
                    <span>Subtotal</span>
                    <span>₹<%= cartTotal.subtotal %></span>
                </div>
                <div class="summary-row">
                    <span>GST (18%)</span>
                    <span>₹<%= cartTotal.tax %></span>
                </div>
                <div class="summary-row">
                    <span>Estimated Shipping</span>
                    <span>₹<%= cartTotal.shipping %></span>
                </div>
                <div class="summary-row">
                    <span>Discount</span>
                    <span>-₹<%= cartTotal.discount %></span>
                </div>
                <div class="summary-row total">
                    <span>Total</span>
                    <span>₹<%= cartTotal.final %></span>
                </div>
                <button class="continue-btn">PLACE ORDER</button>
            </div>
        </aside>
    </div>

    <button class="mobile-cart-toggle">
        <span class="material-symbols-outlined">local_mall</span>
    </button>

    <div class="modal" id="addressModal">
        <div class="modal-content">
            <h2 class="section-title">Add New Address</h2>
            <form class="address-form">
                <input type="hidden" name="addressId" id="addressId">
                <input type="text" name="name" placeholder="Full Name" required>
                <input type="tel" name="phone" placeholder="Mobile Number" required>
                <input type="tel" name="altPhone" placeholder="Alternate Mobile Number" required>
                <input type="text" name="landMark" placeholder="House No., Building Name" required>
                <input type="text" name="city" placeholder="City" required>
                <option value="" style="font-size: 12px;">Select State</option>
                <select name="state" required >
                    <% states.forEach(state => { %>
                        <option value="<%= state.code %>"><%= state.name %></option>
                    <% }); %>
                </select>
                <input type="text" name="pincode" placeholder="PIN Code" required pattern="[0-9]{6}">
                <select name="addressType" required>
                    <option value="">Select Address Type</option>
                    <option value="Home">Home</option>
                    <option value="Work">Work</option>
                    <option value="Other">Other</option>
                </select>
                <button type="submit" class="continue-btn">Save Address</button>
            </form>
        </div>
    </div>

    <script>
        // DOM Elements
const aside = document.querySelector('aside');
const addressContainer = document.getElementById('addressContainer');
const addressModal = document.getElementById('addressModal');
const mobileCartToggle = document.querySelector('.mobile-cart-toggle');
const closeCart = document.querySelector('.close-cart');
const addressForm = document.querySelector('.address-form');

let editingAddressId = null;

// Toggle sections
document.querySelectorAll('.section-header').forEach(header => {
    header.addEventListener('click', () => {
        const content = header.nextElementSibling;
        const toggle = header.querySelector('.toggle');
        content.classList.toggle('active');
        toggle.textContent = content.classList.contains('active') ? '▲' : '▼';
    });
});

// Mobile cart toggle
mobileCartToggle?.addEventListener('click', () => {
    aside.classList.add('active');
});

closeCart?.addEventListener('click', () => {
    aside.classList.remove('active');
});

// Address management functions
async function setDefaultAddress(addressId) {
    try {
        const response = await fetch('/setDefaultAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ addressId })
        });

        const data = await response.json();
        
        if (response.ok && data.status) {
            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message,
                showConfirmButton: false,
                timer: 1500
            });
            // Force page reload after the alert is closed
            window.location.reload();
        } else {
            throw new Error(data.message || 'Failed to update default address');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Failed to update default address'
        });
    }
}

function editAddress(addressId) {
    editingAddressId = addressId;
    const addressCard = document.querySelector(`.address-card[data-id="${addressId}"]`);
    
    if (addressCard) {
        const form = addressModal.querySelector('form');
        form.addressId.value = addressId;
        form.name.value = addressCard.querySelector('h3').textContent;
        form.landMark.value = addressCard.querySelector('p').textContent;
        
        // Extract state and pincode from the second paragraph
        const locationText = addressCard.querySelectorAll('p')[1].textContent;
        const [cityState, pincode] = locationText.split(' - ');
        const [city, state] = cityState.split(', ');
        
        form.city.value = city;
        form.state.value = state;
        form.pincode.value = pincode;
        
        // Extract phone numbers
        const phoneText = addressCard.querySelectorAll('p')[2].textContent;
        const altPhoneText = addressCard.querySelectorAll('p')[3].textContent;
        form.phone.value = phoneText.replace('Phone: ', '');
        form.altPhone.value = altPhoneText.replace('Alt Phone: ', '');
        
        addressModal.classList.add('active');
    }
}

async function deleteAddress(addressId) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/deleteAddress/${addressId}`, {
                method: 'DELETE'
            });

            const data = await response.json();
            
            if (response.ok && data.status) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: data.message,
                    showConfirmButton: false,
                    timer: 1500
                });
                // Force page reload after the alert is closed
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to delete address');
            }
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Failed to delete address'
        });
    }
}

// Form submission handling
addressForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    try {
        const formData = new FormData(e.target);
        const response = await fetch('/addOrEditAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });

        const data = await response.json();
        
        // Check if the response was successful
        if (response.ok && data.status) {
            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message,
                showConfirmButton: false,
                timer: 1500
            });
            // Force page reload after the alert is closed
            window.location.reload();
        } else {
            throw new Error(data.message || 'Failed to save address');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Failed to save address'
        });
    }
});

// Add new address button handler
document.querySelector('.add-address-btn')?.addEventListener('click', () => {
    editingAddressId = null;
    addressForm.reset();
    document.getElementById('addressId').value = '';
    addressModal.classList.add('active');
});

// Close modal when clicking outside
addressModal?.addEventListener('click', (e) => {
    if (e.target === addressModal) {
        addressModal.classList.remove('active');
    }
});

// Continue button handling
document.querySelector('.continue-btn')?.addEventListener('click', () => {
    const selectedAddress = document.querySelector('.address-card.selected');
    const selectedPayment = document.querySelector('input[name="payment"]:checked');

    if (!selectedAddress) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select a delivery address!'
        });
        return;
    }

    if (!selectedPayment) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select a payment method!'
        });
        return;
    }

    // Here you can add your order placement logic
    // For now, just showing success message
    Swal.fire({
        icon: 'success',
        title: 'Order Placed!',
        text: 'Your order has been placed successfully.',
        showConfirmButton: false,
        timer: 2000
    });
});

// Initialize page
document.addEventListener('DOMContentLoaded', () => {
    // Open first section by default
    document.querySelector('.section-content').classList.add('active');
    document.querySelector('.toggle').textContent = '▲';
});
    </script>
</body>
</html>