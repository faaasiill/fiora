<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="/css/checkOut.css">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/home.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.all.min.js"></script>
</head>

<body>
    <header class="header">
        <img src="/images/Fiora1/2.png" style="margin: -30px; margin-left: 50px; width: 70px;" alt="Logo" class="logo">
    </header>

    <div class="container">
        <main>
            <div class="checkout-section">
                <div class="section-header">
                    <h2 class="section-title">1. DELIVERY ADDRESS</h2>
                    <span class="toggle">▼</span>
                </div>
                <div class="section-content">
                    <div id="addressContainer">
                        <div class="address-list">
                            <% if (addresses && addresses.length> 0) { %>
                                <% addresses.forEach(addr=> { %>
                                    <div class="address-card <%= addr.isDefault ? 'selected' : '' %>"
                                        data-id="<%= addr._id %>">
                                        <h3>
                                            <%= addr.name %>
                                        </h3>
                                        <p>
                                            <%= addr.landMark %>
                                        </p>
                                        <p>
                                            <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                                        </p>
                                        <p>Phone: <%= addr.phone %>
                                        </p>
                                        <p>Alt Phone: <%= addr.altPhone %>
                                        </p>
                                        <p>Type: <%= addr.addressType %>
                                        </p>
                                        <div class="address-actions">
                                            <button onclick="setDefaultAddress('<%= addr._id %>')" <%=addr.isDefault
                                                ? 'disabled' : '' %>>
                                                <%= addr.isDefault ? 'Default Address' : 'Set as Default' %>
                                            </button>
                                            <button onclick="editAddress('<%= addr._id %>')">Edit</button>
                                            <button onclick="deleteAddress('<%= addr._id %>')">Delete</button>
                                        </div>
                                    </div>
                                    <% }); %>
                                        <% } else { %>
                                            <p>No addresses found. Please add a new address.</p>
                                            <% } %>
                        </div>
                        <div class="add-address-container">
                            <button class="add-address-btn">+ Add New Address</button>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Payment section remains the same -->
            <div class="checkout-section">
                <div class="section-header">
                    <h2 class="section-title">2. PAYMENT METHOD</h2>
                    <span class="toggle">▼</span>
                </div>
                <div class="section-content">
                    <div class="payment-section">
                        <!-- Cash on Delivery -->
                        <div class="payment-method">
                            <input type="radio" name="payment" id="cod">
                            <label class="payment-card" for="cod">
                                <div class="payment-icon">
                                    <span class="material-symbols-outlined">payments</span>
                                </div>
                                <div class="payment-details">
                                    <div class="payment-title">Cash on Delivery</div>
                                    <div class="payment-description">Pay with cash when your order is delivered</div>
                                </div>
                                <div class="payment-indicator"></div>
                            </label>
                        </div>

                        <!-- Razorpay -->
                        <div class="payment-method">
                            <input type="radio" name="payment" id="razorpay">
                            <label class="payment-card" for="razorpay">
                                <div class="payment-icon">
                                    <span class="material-symbols-outlined">credit_card</span>
                                </div>
                                <div class="payment-details">
                                    <div class="payment-title">Razorpay</div>
                                    <div class="payment-description">Pay securely with credit/debit card via Razorpay
                                    </div>
                                </div>
                                <div class="payment-indicator"></div>
                            </label>
                        </div>

                        <!-- PayPal -->
                        <div class="payment-method">
                            <input type="radio" name="payment" id="paypal">
                            <label class="payment-card" for="paypal">
                                <div class="payment-icon">
                                    <span class="material-symbols-outlined">account_balance</span>
                                </div>
                                <div class="payment-details">
                                    <div class="payment-title">PayPal</div>
                                    <div class="payment-description">Fast, secure payment with your PayPal account</div>
                                </div>
                                <div class="payment-indicator"></div>
                            </label>
                        </div>

                        <!-- UPI Payment -->
                        <div class="payment-method">
                            <input type="radio" name="payment" id="upi">
                            <label class="payment-card" for="upi">
                                <div class="payment-icon">
                                    <span class="material-symbols-outlined">smartphone</span>
                                </div>
                                <div class="payment-details">
                                    <div class="payment-title">UPI Payment</div>
                                    <div class="payment-description">Pay instantly using UPI apps like Google Pay,
                                        PhonePe</div>
                                </div>
                                <div class="payment-indicator"></div>
                            </label>
                        </div>

                        <!-- Secure payment message -->
                        <div class="secure-badge">
                            <span class="material-symbols-outlined">lock</span>
                            <span>All transactions are secure and encrypted</span>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <aside>
            <div class="cart-summary">
                <div class="cart-header">
                    <h2 class="section-title">IN YOUR BAG</h2>
                    <button class="close-cart">×</button>
                </div>

                <% cartItems.forEach(item=> { %>
                    <div class="product-info">
                        <img src="<%= item.image %>" alt="<%= item.name %>" class="product-img">
                        <div>
                            <h3>
                                <%= item.name %>
                            </h3>
                            <p>Qty: <%= item.quantity %> × ₹<%= item.price.toFixed(2) %>
                            </p>
                            </p>
                        </div>
                    </div>
                    <% }); %>
                        <div class="summary-row">
                            <span>Subtotal</span>
                            <span>₹<%= cartTotal.subtotal %></span>
                        </div>
                        <div class="summary-row">
                            <span>GST (18%)</span>
                            <span>₹<%= cartTotal.tax %></span>
                        </div>
                        <div class="summary-row">
                            <span>Estimated Shipping</span>
                            <span>₹<%= cartTotal.shipping %></span>
                        </div>
                        <div class="summary-row">
                            <span>Discount</span>
                            <span>-₹<%= cartTotal.discount %></span>
                        </div>
                        <div class="summary-row total">
                            <span>Total</span>
                            <span>₹<%= cartTotal.final %></span>
                        </div>
                        <button class="continue-btn">PLACE ORDER</button>
            </div>
        </aside>
    </div>

    <button class="mobile-cart-toggle">
        <span class="material-symbols-outlined">local_mall</span>
    </button>

    <div class="modal" id="addressModal">
        <div class="modal-content">
            <h2 class="section-title">Add New Address</h2>
            <form class="address-form">
                <input type="hidden" name="addressId" id="addressId">
                <input type="text" name="name" placeholder="Full Name" required>
                <input type="tel" name="phone" placeholder="Mobile Number" required>
                <input type="tel" name="altPhone" placeholder="Alternate Mobile Number" required>
                <input type="text" name="landMark" placeholder="House No., Building Name" required>
                <input type="text" name="city" placeholder="City" required>
                <option value="" style="font-size: 12px;">Select State</option>
                <select name="state" required>
                    <% states.forEach(state=> { %>
                        <option value="<%= state.code %>">
                            <%= state.name %>
                        </option>
                        <% }); %>
                </select>
                <input type="text" name="pincode" placeholder="PIN Code" required pattern="[0-9]{6}">
                <select name="addressType" required>
                    <option value="">Select Address Type</option>
                    <option value="Home">Home</option>
                    <option value="Work">Work</option>
                    <option value="Other">Other</option>
                </select>
                <button type="submit" class="continue-btn">Save Address</button>
            </form>
        </div>
    </div>
    <img style="width: 100vw;" src="/images/54815E6F-C058-446C-AD70-DF26744C9EFB.jpeg" alt="">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <%- include('../partials/user/footer.ejs') %>
        <script>
            // Enhanced payment method selection
            document.addEventListener('DOMContentLoaded', function () {
                const paymentMethods = document.querySelectorAll('.payment-method');

                // Set default selection if none is selected
                function setDefaultPayment() {
                    const hasSelected = Array.from(paymentMethods).some(method =>
                        method.classList.contains('selected'));

                    if (!hasSelected && paymentMethods.length > 0) {
                        const firstMethod = paymentMethods[0];
                        firstMethod.classList.add('selected');
                        const radio = firstMethod.querySelector('input[type="radio"]');
                        if (radio) radio.checked = true;
                    }
                }

                // Handle payment method selection
                paymentMethods.forEach(method => {
                    method.addEventListener('click', function () {
                        // Clear all selections
                        paymentMethods.forEach(m => {
                            m.classList.remove('selected');
                            const radio = m.querySelector('input[type="radio"]');
                            if (radio) radio.checked = false;
                        });

                        // Set current selection
                        method.classList.add('selected');
                        const radio = method.querySelector('input[type="radio"]');
                        if (radio) radio.checked = true;

                        // Optional: Smooth scroll to next section if this is last input
                        const isLastPaymentMethod = Array.from(paymentMethods).indexOf(method) === paymentMethods.length - 1;
                        if (isLastPaymentMethod) {
                            setTimeout(() => {
                                const nextSection = method.closest('.checkout-section').nextElementSibling;
                                if (nextSection) {
                                    nextSection.scrollIntoView({ behavior: 'smooth' });

                                    // Optionally open the next section
                                    const nextSectionContent = nextSection.querySelector('.section-content');
                                    const nextSectionToggle = nextSection.querySelector('.toggle');
                                    if (nextSectionContent && !nextSectionContent.classList.contains('active')) {
                                        nextSectionContent.classList.add('active');
                                        if (nextSectionToggle) nextSectionToggle.textContent = '▲';
                                    }
                                }
                            }, 300);
                        }
                    });
                });

                // Focus effects for accessibility
                paymentMethods.forEach(method => {
                    const radio = method.querySelector('input[type="radio"]');
                    if (radio) {
                        radio.addEventListener('focus', () => {
                            method.classList.add('focus');
                        });

                        radio.addEventListener('blur', () => {
                            method.classList.remove('focus');
                        });
                    }
                });

                // Initialize default selection
                setDefaultPayment();
            });
            // DOM Elements
            const aside = document.querySelector('aside');
            const addressContainer = document.getElementById('addressContainer');
            const addressModal = document.getElementById('addressModal');
            const mobileCartToggle = document.querySelector('.mobile-cart-toggle');
            const closeCart = document.querySelector('.close-cart');
            const addressForm = document.querySelector('.address-form');

            let editingAddressId = null;

            // Toggle sections
            document.querySelectorAll('.section-header').forEach(header => {
                header.addEventListener('click', () => {
                    const content = header.nextElementSibling;
                    const toggle = header.querySelector('.toggle');
                    content.classList.toggle('active');
                    toggle.textContent = content.classList.contains('active') ? '▲' : '▼';
                });
            });

            // Mobile cart toggle
            mobileCartToggle?.addEventListener('click', () => {
                aside.classList.add('active');
            });

            closeCart?.addEventListener('click', () => {
                aside.classList.remove('active');
            });

            // Address management functions
            async function setDefaultAddress(addressId) {
                try {
                    const response = await fetch('/setDefaultAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ addressId })
                    });

                    const data = await response.json();

                    if (response.ok && data.status) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                        // Force page reload after the alert is closed
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Failed to update default address');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: error.message || 'Failed to update default address'
                    });
                }
            }

            function editAddress(addressId) {
                editingAddressId = addressId;
                const addressCard = document.querySelector(`.address-card[data-id="${addressId}"]`);

                if (addressCard) {
                    const form = addressModal.querySelector('form');
                    form.addressId.value = addressId;
                    form.name.value = addressCard.querySelector('h3').textContent;
                    form.landMark.value = addressCard.querySelector('p').textContent;

                    // Extract state and pincode from the second paragraph
                    const locationText = addressCard.querySelectorAll('p')[1].textContent;
                    const [cityState, pincode] = locationText.split(' - ');
                    const [city, state] = cityState.split(', ');

                    form.city.value = city;
                    form.state.value = state;
                    form.pincode.value = pincode;

                    // Extract phone numbers
                    const phoneText = addressCard.querySelectorAll('p')[2].textContent;
                    const altPhoneText = addressCard.querySelectorAll('p')[3].textContent;
                    form.phone.value = phoneText.replace('Phone: ', '');
                    form.altPhone.value = altPhoneText.replace('Alt Phone: ', '');

                    addressModal.classList.add('active');
                }
            }

            async function deleteAddress(addressId) {
                try {
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    });

                    if (result.isConfirmed) {
                        const response = await fetch(`/deleteAddress/${addressId}`, {
                            method: 'DELETE'
                        });

                        const data = await response.json();

                        if (response.ok && data.status) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: data.message,
                                showConfirmButton: false,
                                timer: 1500
                            });
                            // Force page reload after the alert is closed
                            window.location.reload();
                        } else {
                            throw new Error(data.message || 'Failed to delete address');
                        }
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: error.message || 'Failed to delete address'
                    });
                }
            }

            // Form submission handling
            addressForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                try {
                    const formData = new FormData(e.target);
                    const response = await fetch('/addOrEditAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(Object.fromEntries(formData))
                    });

                    const data = await response.json();

                    // Check if the response was successful
                    if (response.ok && data.status) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                        // Force page reload after the alert is closed
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Failed to save address');
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: error.message || 'Failed to save address'
                    });
                }
            });

            // Add new address button handler
            document.querySelector('.add-address-btn')?.addEventListener('click', () => {
                editingAddressId = null;
                addressForm.reset();
                document.getElementById('addressId').value = '';
                addressModal.classList.add('active');
            });

            // Close modal when clicking outside
            addressModal?.addEventListener('click', (e) => {
                if (e.target === addressModal) {
                    addressModal.classList.remove('active');
                }
            });

            async function placeOrder() {
                try {
                    const selectedAddress = document.querySelector('.address-card.selected');
                    const selectedPayment = document.querySelector('input[name="payment"]:checked');

                    if (!selectedAddress) {
                        throw new Error('Please select a delivery address');
                    }

                    if (!selectedPayment) {
                        throw new Error('Please select a payment method');
                    }

                    const addressDetails = {
                        fullName: selectedAddress.querySelector('h3').textContent,
                        address: selectedAddress.querySelector('p:nth-child(2)').textContent, // landMark
                        city: selectedAddress.querySelector('p:nth-child(3)').textContent.split(',')[0].trim(),
                        state: selectedAddress.querySelector('p:nth-child(3)').textContent.split(',')[1].split('-')[0].trim(),
                        pincode: selectedAddress.querySelector('p:nth-child(3)').textContent.split('-')[1].trim(),
                        mobile: selectedAddress.querySelector('p:nth-child(4)').textContent.replace('Phone: ', ''),
                    };

                    const orderData = {
                        addressId: selectedAddress.dataset.id,
                        addressDetails: addressDetails,
                        paymentMethod: selectedPayment.id
                    };

                    // Show loading state
                    Swal.fire({
                        title: 'Processing Order',
                        text: 'Please wait...',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    const response = await fetch('/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(orderData)
                    });

                    const data = await response.json();

                    if (response.ok && data.status) {
                        if (selectedPayment.id === 'cod') {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Order Placed Successfully!',
                                text: `Order ID: ${data.orderId}`,
                                showConfirmButton: true
                            });
                            window.location.href = `/order-confirmation/${data.orderId}`;
                        } else if (selectedPayment.id === 'razorpay') {
                            // Handle Razorpay payment initiation
                            handleRazorpayPayment(data.orderId);
                        } else if (selectedPayment.id === 'paypal') {
                            // Handle PayPal payment initiation
                            handlePaypalPayment(data.orderId);
                        } else if (selectedPayment.id === 'upi') {
                            // Handle UPI payment initiation
                            handleUPIPayment(data.orderId);
                        }
                    } else {
                        throw new Error(data.message || 'Failed to place order');
                    }

                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: error.message || 'Failed to place order'
                    });
                }
            }

            // Add the Razorpay payment handling function
            async function handleRazorpayPayment(orderId) {
                try {
                    // Create Razorpay order
                    const response = await fetch('/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to create payment order');
                    }

                    // Configure Razorpay options
                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: data.order.currency,
                        name: "Fiora",
                        description: "Payment for your order",
                        order_id: data.order.id,
                        prefill: {
                            name: data.user.name,
                            email: data.user.email,
                            contact: data.user.contact
                        },
                        theme: {
                            color: "#3399cc"
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Payment Cancelled',
                                    text: 'Your payment was cancelled. You can try again.'
                                });
                            }
                        },
                        handler: function (response) {
                            verifyPayment(response, data.orderData.orderId);
                        }
                    };

                    // Initialize Razorpay
                    const rzp = new Razorpay(options);
                    rzp.open();

                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Error',
                        text: error.message || 'Failed to initiate payment'
                    });
                }
            }
            document.querySelector('.continue-btn').addEventListener('click', placeOrder);

            // Initialize page
            document.addEventListener('DOMContentLoaded', () => {
                document.querySelector('.section-content').classList.add('active');
                document.querySelector('.toggle').textContent = '▲';
            });


            // Add this function to handle Razorpay payments
            async function handleRazorpayPayment(orderId) {
                try {
                    // Create Razorpay order
                    const response = await fetch('/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to create payment order');
                    }

                    // Configure Razorpay options
                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: data.order.currency,
                        name: "Fiora",
                        description: "Payment for your order",
                        order_id: data.order.id,
                        prefill: {
                            name: data.user.name,
                            email: data.user.email,
                            contact: data.user.contact
                        },
                        theme: {
                            color: "#3399cc"
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Payment Cancelled',
                                    text: 'Your payment was cancelled. You can try again.'
                                });
                            }
                        },
                        handler: function (response) {
                            verifyPayment(response, data.orderData.orderId);
                        }
                    };

                    // Initialize Razorpay
                    const rzp = new Razorpay(options);
                    rzp.open();

                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Error',
                        text: error.message || 'Failed to initiate payment'
                    });
                }
            }

            // Add this function to verify the payment
            async function verifyPayment(response, orderId) {
                try {
                    // Show loading state
                    Swal.fire({
                        title: 'Verifying Payment',
                        text: 'Please wait...',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Verify payment with server
                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            order_id: orderId
                        })
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyResponse.ok && verifyData.status) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful!',
                            text: 'Your order has been placed successfully',
                            showConfirmButton: true
                        });

                        // Redirect to order confirmation
                        window.location.href = `/order-confirmation/${verifyData.orderId}`;
                    } else {
                        throw new Error(verifyData.message || 'Payment verification failed');
                    }

                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: error.message || 'There was an error verifying your payment'
                    });
                }
            }
        </script>
</body>

</html>