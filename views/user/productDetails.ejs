<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fiora</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,300,0,0" />
    <link rel="stylesheet" href="/css/productDetails.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
    <nav>
        <img src="/images/Fiora1/2.png" class="logo" alt="Logo" />
        <div class="nav-links">

        </div>
        <div class="nav-icons">
            <a id="profile-link" href="<%= locals.user ? '/wishlist' : '/signup' %>"><span
                    class="material-symbols-outlined icon">favorite</span></a>
            <a id="profile-link" href="<%= locals.user ? '/userProfile' : '/signup' %>"><span
                    class="material-symbols-outlined icon">account_circle</span></a>
            <a id="profile-link" href="<%= locals.user ? '/cart' : '/signup' %>"><span
                    class="material-symbols-outlined icon">local_mall</span></a>

        </div>
        <div class="hamburger-menu">
            <span class="material-symbols-outlined" onclick="toggleMenu()">menu</span>
        </div>
        <div class="mobile-nav-links" id="mobileNav">
            <a href="/">Home</a>
            <a href="/products">Shop</a>
            <a href="/products">Categories</a>
            <a href="/contact">Contact</a>
        </div>
    </nav>

    <main class="product-container">
        <div class="product-gallery">
            <div class="zoom-container">
                <img src="<%= product.productImage[0] %>" alt="Main Product Image" class="main-image">
            </div>
            <div class="thumbnail-container">
                <% for(let i=1; i < product.productImage.length; i++) { %>
                    <img src="<%= product.productImage[i] %>" alt="Product Image <%= i %>"
                        class="thumbnail <%= i === 1 ? 'active' : '' %>">
                    <% } %>
            </div>
        </div>


        <div class="product-info">
            <div class="product-header">
                <h1>
                    <%= product.productName %>
                </h1>
                <button class="wishlist-btn" onclick="toggleWishlist(this)">
                    <i class="far fa-heart"></i>
                </button>
            </div>

            <div class="price">
                ₹<%= product.salePrice %>
                    <span class="ogPrice">₹<%= product.regularPrice %></span>
                    <span class="tax-info">Tax included.</span>
                    <% if (product.status==='Available' ) { %>
                        <span class="status-available">
                            <%= product.status %>
                        </span>
                        <% } else { %>
                            <span class="status-unavailable">
                                <%= product.status %>
                            </span>
                            <% } %>
            </div>


            <div class="description-section">
                <div class="description-header" onclick="toggleDescription()">
                    <h3>Description</h3>
                    <i class="fas fa-chevron-down"></i>
                </div>
                <div class="description-content">
                    <p>
                        <%= product.description %>
                    </p>
                </div>
            </div>

            <p class="offerDis">Offers: <br>
                • Shop for ₹4999 or more & get a freebie worth ₹1999 <br>
                • Additional 5% off on all prepaid orders</p>

            <div class="color-options">
                <label>Colour:</label>
                <div class="color-circles">
                    <div class="color-circle active" style="background-color: <%= product.color %>"></div>
                </div>
            </div>

            <!-- Product Status & Category -->
            <div class="product-meta">
                <div class="category-tag">
                    Category: <span>
                        <%= product.category.name %>
                    </span>
                </div>
                <div class="availability-tag <%= product.quantity > 0 ? 'in-stock' : 'out-of-stock' %>">
                    <%= product.quantity> 0 ? 'In Stock' : 'Out of Stock' %>
                        (<%= product.quantity %> items left)
                </div>
            </div>



            <!-- Product Features -->
            <div class="product-features">
                <div class="feature-item">
                    <i class="fas fa-undo"></i>
                    <span>30 Days Return Policy</span>
                </div>
                <div class="feature-item">
                    <i class="fas fa-money-bill-wave"></i>
                    <span>Cash on Delivery Available</span>
                </div>
            </div>

            <div class="buttons">
                <button class="add-to-cart" data-product-id="<%= product._id %>">ADD TO CART</button>
                <button class="buy-now">BUY NOW</button>
            </div>
        </div>
    </main>

    <section class="recommendations">
        <h2>You may also like</h2>
        <p style="color: #666; margin-bottom: 2rem;">More products you might love</p>
        <div class="recommendation-grid">
            <% if (relatedProducts && relatedProducts.length> 0) { %>
                <% relatedProducts.forEach(relProduct=> { %>
                    <div class="product-card">
                        <a href="/productDetails?id=<%= relProduct._id %>">
                            <div class="product-image">
                                <img src="<%= relProduct.productImage[0] %>" alt="<%= relProduct.productName %>"
                                    loading="lazy">
                                <div class="wishlist-icon">
                                    <span class="material-symbols-outlined">favorite</span>
                                </div>
                            </div>
                            <div class="product-details">
                                <h3 class="product-name">
                                    <%= relProduct.productName %>
                                </h3>
                                <div class="price-container">
                                    <p class="sale-price">₹<%= relProduct.salePrice %>
                                    </p>
                                    <p class="regular-price">₹<%= relProduct.regularPrice %>
                                    </p>
                                </div>
                            </div>
                        </a>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <p class="no-products">No related products available</p>
                            <% } %>
        </div>
    </section>
    <%- include("../../views/partials/user/footer") %>
        <script>
            // Global State
            const CartState = {
                isAdding: false
            };

            const WishlistState = {
                isProcessing: false
            };

            // Utility Functions
            const UIUtil = {
                showNotification: (title, message, icon) => {
                    Swal.fire({
                        title,
                        text: message,
                        icon,
                        timer: 2000,
                        showConfirmButton: false
                    });
                },

                showLoginPrompt: () => {
                    Swal.fire({
                        title: 'Please Login',
                        text: 'You need to login first to manage your wishlist',
                        icon: 'info',
                        showCancelButton: true,
                        confirmButtonText: 'Login',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) window.location.href = '/login';
                    });
                },

                updateCartCount: (count) => {
                    const cartCountElement = document.querySelector('.cart-count');
                    if (cartCountElement) cartCountElement.textContent = count;
                }
            };

            // Cart Functionality
            const CartManager = {
                handleAddToCartResponse: (response) => {
                    CartState.isAdding = false;
                    if (response.status) {
                        UIUtil.showNotification("Success!", "Product added to cart successfully", "success")
                            .then(() => {
                                if (response.cartCount) UIUtil.updateCartCount(response.cartCount);
                            });
                    } else {
                        CartManager.handleAddToCartError(response);
                    }
                },

                handleAddToCartError: (response) => {
                    if (response.stockError) {
                        UIUtil.showNotification("Out of Stock!", "Sorry, this product is currently out of stock", "warning");
                    } else if (response.notLoggedIn) {
                        UIUtil.showLoginPrompt();
                    } else {
                        UIUtil.showNotification("Error!", response.message || "Something went wrong", "error");
                    }
                },

                addToCart: (productId) => {
                    if (!productId || CartState.isAdding) return;
                    CartState.isAdding = true;

                    $.ajax({
                        type: "POST",
                        url: "/addToCart",
                        data: JSON.stringify({ productId }),
                        contentType: "application/json",
                        dataType: 'json',
                        success: CartManager.handleAddToCartResponse,
                        error: (xhr) => {
                            CartState.isAdding = false;
                            xhr.status === 401 ? UIUtil.showLoginPrompt() :
                                UIUtil.showNotification("Error!", "Failed to add product to cart", "error");
                        }
                    });
                }
            };

            // Wishlist Functionality
            const WishlistManager = {
                initialize: () => {
                    const wishlistBtn = document.querySelector('.wishlist-btn');
                    if (!wishlistBtn) return;

                    const productId = document.querySelector('.add-to-cart')?.dataset.productId;
                    WishlistManager.checkInitialState(productId);

                    wishlistBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        WishlistManager.toggleWishlist(productId, wishlistBtn);
                    });
                },

                toggleWishlistButton: (button) => {
                    const icon = button.querySelector('i');
                    button.classList.toggle('active');
                    icon.classList.toggle('far');
                    icon.classList.toggle('fas');
                    icon.style.color = button.classList.contains('active') ? '#ff4444' : '#333';
                },

                checkInitialState: async (productId) => {
                    try {
                        const response = await fetch('/getWishlistedProducts', {
                            method: 'GET',
                            headers: { 'Accept': 'application/json' },
                            credentials: 'include'
                        });

                        if (!response.ok) throw new Error('Failed to check wishlist state');
                        const wishlistedProducts = await response.json();

                        const wishlistBtn = document.querySelector('.wishlist-btn');
                        if (wishlistedProducts.includes(productId)) {
                            WishlistManager.toggleWishlistButton(wishlistBtn);
                        }
                    } catch (error) {
                        console.error('Wishlist check error:', error);
                    }
                },

                toggleWishlist: async (productId, button) => {
                    if (WishlistState.isProcessing || !productId) return;
                    WishlistState.isProcessing = true;

                    try {
                        const isRemoving = button.classList.contains('active');

                        if (isRemoving) {
                            const confirmation = await Swal.fire({
                                title: 'Are you sure?',
                                text: 'You won\'t be able to revert this!',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, remove it!'
                            });

                            if (!confirmation.isConfirmed) {
                                WishlistState.isProcessing = false;
                                return;
                            }
                        }

                        const endpoint = isRemoving ? '/removeFromWishlist' : '/addToWishlist';
                        const response = await fetch(endpoint, {
                            method: 'POST', // Change to POST
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            credentials: 'include',
                            body: JSON.stringify({ productId }) // Send productId in body
                        });

                        if (response.status === 401) {
                            UIUtil.showLoginPrompt();
                            return;
                        }

                        if (!response.ok) throw new Error('Server error');
                        const data = await response.json();

                        if (data.status) {
                            WishlistManager.toggleWishlistButton(button);
                            UIUtil.showNotification(
                                'Success',
                                isRemoving ? 'Removed from wishlist' : 'Added to wishlist',
                                'success'
                            );
                        }
                    } catch (error) {
                        console.error('Wishlist operation error:', error);
                        UIUtil.showNotification('Error', error.message || 'Operation failed', 'error');
                    } finally {
                        WishlistState.isProcessing = false;
                    }
                }
            };


            // Product Gallery
            const ProductGallery = {
                initZoom: () => {
                    const zoomContainer = document.querySelector('.zoom-container');
                    const mainImage = document.querySelector('.main-image');
                    if (!zoomContainer || !mainImage) return;

                    zoomContainer.addEventListener('mousemove', (e) => {
                        const rect = zoomContainer.getBoundingClientRect();
                        const x = (e.clientX - rect.left) / zoomContainer.offsetWidth * 100;
                        const y = (e.clientY - rect.top) / zoomContainer.offsetHeight * 100;
                        mainImage.style.transform = `scale(2) translate(${-x}%, ${-y}%)`;
                    });

                    zoomContainer.addEventListener('mouseleave', () => {
                        mainImage.style.transform = 'scale(1)';
                    });
                },

                initThumbnails: () => {
                    const thumbnails = document.querySelectorAll('.thumbnail');
                    const mainImage = document.querySelector('.main-image');

                    thumbnails.forEach(thumb => {
                        thumb.addEventListener('click', () => {
                            thumbnails.forEach(t => t.classList.remove('active'));
                            thumb.classList.add('active');
                            mainImage.src = thumb.src.replace('80/80', '600/600');
                        });
                    });
                }
            };

            // Product Options
            const ProductOptions = {
                initSizeSelection: () => {
                    document.querySelectorAll('.size-btn').forEach(button => {
                        button.addEventListener('click', () => {
                            button.parentElement.querySelectorAll('.size-btn').forEach(btn => btn.classList.remove('active'));
                            button.classList.add('active');
                        });
                    });
                },

                initColorSelection: () => {
                    document.querySelectorAll('.color-circle').forEach(circle => {
                        circle.addEventListener('click', () => {
                            document.querySelectorAll('.color-circle').forEach(c => c.classList.remove('active'));
                            circle.classList.add('active');
                        });
                    });
                }
            };

            // Quantity Control
            const QuantityControl = {
                init: () => {
                    document.querySelector('.quantity-container')?.addEventListener('click', (e) => {
                        const input = document.getElementById('quantity');
                        const max = parseInt(input.getAttribute('max'));
                        let value = parseInt(input.value);

                        if (e.target.classList.contains('increment') && value < max) {
                            input.value = value + 1;
                        } else if (e.target.classList.contains('decrement') && value > 1) {
                            input.value = value - 1;
                        }
                    });
                }
            };

            // Initialization
            document.addEventListener('DOMContentLoaded', () => {
                // Cart
                $('.add-to-cart').on('click', (e) => {
                    e.preventDefault();
                    const productId = $(e.currentTarget).data('product-id');
                    if (productId) CartManager.addToCart(productId);
                });

                // Wishlist
                WishlistManager.initialize();

                // Product Gallery
                ProductGallery.initZoom();
                ProductGallery.initThumbnails();

                // Product Options
                ProductOptions.initSizeSelection();
                ProductOptions.initColorSelection();

                // Quantity Control
                QuantityControl.init();
            });

            
        </script>
</body>

</html>