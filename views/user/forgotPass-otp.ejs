<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <!-- Add jQuery and SweetAlert2 CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Your existing styles remain the same */
        @import url('https://fonts.googleapis.com/css2?family=Julius+Sans+One&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'poppins', sans-serif;
            letter-spacing: -0.8px;
        }

        body {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f5f5f5;
        }

        .container {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 320px;
        }

        .title {
            color: #333;
            text-align: center;
            margin-bottom: 2rem;
            font-size: 1.4rem;
            font-weight: 600;
        }

        .otp-container {
            margin-bottom: 1.5rem;
            width: 100%;
            font-size: 14px;
        }

        .otp-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            color: #333;
            font-size: 1.2rem;
            letter-spacing: 0.5rem;
            text-align: center;
            margin-bottom: 1rem;
        }

        .otp-input:focus {
            outline: none;
            border-color: #666;
        }

        .verify-btn {
            width: 100%;
            padding: 0.75rem;
            background: #333;
            border: none;
            border-radius: 4px;
            color: white;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
        }

        .verify-btn:hover {
            background: #444;
        }

        .verify-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .timer {
            text-align: center;
            color: #666;
            font-size: 12px;
            margin: 1rem 0;
        }

        .resend-otp-btnContainer {
            display: flex;
            justify-content: center;
            width: 100%;
        }

        .resend {
            color: #666;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.9rem;
            background: none;
            border: none;
            padding: 0.5rem;
            opacity: 0.5;
            pointer-events: none;
        }

        .resend.active {
            opacity: 1;
            pointer-events: auto;
        }

        .resend:hover {
            color: #333;
        }

        .message {
            text-align: center;
            margin-top: 1rem;
            padding: 0.5rem;
            border-radius: 4px;
            font-size: 0.9rem;
            display: none;
        }

        .success {
            background: #f0f9f0;
            color: #28a745;
            display: block;
        }

        .error-message {
            background: #fff5f5;
            color: #dc3545;
            display: block;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="title">Verify OTP</h1>
        <form id="otpForm">
            <div class="otp-container">
                <input type="text" class="otp-input" name="otp" id="otp" maxlength="6" placeholder="Enter OTP"
                    autocomplete="off" required>
            </div>
            <button type="submit" class="verify-btn" id="verifyBtn">Verify OTP</button>
        </form>
        <div class="timer" id="otpTimer">Time remaining: 1:00</div>
        <div class="resend-otp-btnContainer">
            <button type="button" style="background-color: rgba(255, 255, 255, 0); border: 0;" class="resend"
                id="resendBtn">Resend OTP</button>
        </div>
        <div id="message" class="message"></div>
    </div>

    <script>
        // Global variables
        let otpTimerInterval;
        let timer = 60;

        document.addEventListener('DOMContentLoaded', function () {
            const verifyBtn = document.getElementById('verifyBtn');
            const resendBtn = document.getElementById('resendBtn');
            const messageDiv = document.getElementById('message');
            const otpInput = document.getElementById('otp');
            const otpForm = document.getElementById('otpForm');

            // Initialize timer on page load
            startOtpTimer();

            // Validate OTP input in real-time
            otpInput.addEventListener('input', function (e) {
                // Remove any non-numeric characters
                this.value = this.value.replace(/[^0-9]/g, '');

                // Remove error styling if present
                this.classList.remove('error');
                messageDiv.textContent = '';

                // Validate input type and length
                if (this.value.length > 0) {
                    if (!/^\d+$/.test(this.value)) {
                        showError('Please enter numbers only');
                        this.value = this.value.replace(/[^\d]/g, '');
                    }
                }
            });

            // Validate on blur (when input loses focus)
            otpInput.addEventListener('blur', function () {
                if (this.value.length > 0 && this.value.length < 6) {
                    showError('OTP must be 6 digits');
                    this.classList.add('error');
                }
            });

            // Handle form submission
            otpForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const otp = otpInput.value;

                // Validate OTP before submission
                if (!validateOTP(otp)) {
                    return;
                }

                // Show loading state
                Swal.fire({
                    title: 'Verifying OTP...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Make AJAX call to verify OTP
                $.ajax({
                    type: 'POST',
                    url: '/verify-passForgot-otp',
                    data: { otp: otp },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'OTP verified successfully',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                window.location.href = response.redirectUrl;
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Invalid OTP',
                                text: 'Please check and try again'
                            });
                            otpInput.classList.add('error');
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to verify OTP. Please try again.'
                        });
                    }
                });
            });

            // Resend OTP button handler
            resendBtn.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                if (!this.classList.contains('active')) {
                    return;
                }

                Swal.fire({
                    title: 'Sending OTP...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                $.ajax({
                    type: 'POST',
                    url: '/resent-forgot-otp',
                    success: function (response) {
                        if (response.success) {
                            startOtpTimer();
                            otpInput.value = '';
                            otpInput.classList.remove('error');
                            messageDiv.textContent = '';

                            Swal.fire({
                                icon: 'success',
                                title: 'OTP Sent!',
                                text: 'Check your email for the new OTP',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message || 'Failed to send OTP'
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Resend OTP Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to resend OTP. Please try again.'
                        });
                    }
                });
            });
        });

        // Validation helper function
        function validateOTP(otp) {
            const messageDiv = document.getElementById('message');
            const otpInput = document.getElementById('otp');

            // Check if OTP is empty
            if (!otp) {
                showError('Please enter OTP');
                otpInput.classList.add('error');
                return false;
            }

            // Check if OTP is exactly 6 digits
            if (otp.length !== 6) {
                showError('OTP must be 6 digits');
                otpInput.classList.add('error');
                return false;
            }

            // Check if OTP contains only numbers
            if (!/^\d+$/.test(otp)) {
                showError('OTP must contain only numbers');
                otpInput.classList.add('error');
                return false;
            }

            return true;
        }

        // Error display helper function
        function showError(message) {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = message;
            messageDiv.style.color = '#dc3545';
        }

        // Timer color update function
        function updateTimerColor(percentage) {
            const timerElement = document.getElementById("otpTimer");
            if (percentage < 15) {
                timerElement.style.color = "#dc3545";
            }
        }

        // Timer start function
        function startOtpTimer() {
            const verifyBtn = document.getElementById('verifyBtn');
            const resendBtn = document.getElementById('resendBtn');
            const timerElement = document.getElementById('otpTimer');

            clearInterval(otpTimerInterval);
            timer = 60;

            verifyBtn.disabled = false;
            resendBtn.classList.remove('active');

            otpTimerInterval = setInterval(() => {
                const minutes = Math.floor(timer / 60);
                const seconds = timer % 60;

                if (timer <= 0) {
                    clearInterval(otpTimerInterval);
                    timerElement.textContent = 'OTP Expired';
                    timerElement.style.color = '#dc3545';
                    verifyBtn.disabled = true;
                    resendBtn.classList.add('active');
                    return;
                }

                timerElement.textContent = `Time remaining: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                updateTimerColor((timer / 60) * 100);
                timer--;
            }, 1000);
        }
    </script>

    <style>
        .error {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
        }

        #message {
            margin-top: 10px;
            font-size: 14px;
            text-align: center;
        }
    </style>
</body>

</html>