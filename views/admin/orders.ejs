<!-- views/orders.ejs -->
<%- include("../../views/partials/admin/header") %>
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Order Management</title>
        <link rel="stylesheet" href="/css/order.css">
    </head>

    <body>
        <div class="admin-card-filters">
            <div class="search-section">
                <input type="text" id="searchInput" placeholder="Search by Order ID or Customer Name..."
                    class="search-input">
            </div>
            <div class="filter-section">
                <select id="statusFilter" class="filter-select">
                    <option value="">Filter by Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Processing">Processing</option>
                    <option value="Shipped">Shipped</option>
                    <option value="Delivered">Delivered</option>
                    <option value="Cancelled">Cancelled</option>
                    <option value="Return Request">Return Request</option>
                    <option value="Returned">Returned</option>
                </select>
                <select id="sortBy" class="filter-select">
                    <option value="">Sort by</option>
                    <option value="date-new">Date (Newest First)</option>
                    <option value="date-old">Date (Oldest First)</option>
                    <option value="amount-high">Amount (High to Low)</option>
                    <option value="amount-low">Amount (Low to High)</option>
                </select>
            </div>
        </div>
        <div class="container-fluid">
            <div class="admin-card">
                <div class="admin-card-header">
                    <h2>Order Management</h2>
                </div>
                <div class="admin-card-body">
                    <div class="table-responsive">
                        <table class="admin-table">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Order Date</th>
                                    <th>Status</th>
                                    <th>Total Amount</th>
                                    <th>Payment</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% orders.forEach(order=> { %>
                                    <tr data-order-id="<%= order._id %>">
                                        <td>
                                            <%= order.orderId.substring(0, 8) %>
                                                <% if (order.status==='Cancelled' ) { %>
                                                    <span class="cancellation-badge">Cancelled</span>
                                                    <% } %>
                                        </td>
                                        <td>
                                            <%= order.address.fullName %>
                                        </td>
                                        <td>
                                            <%= helpers.formatDate(order.createdOn) %>
                                        </td>
                                        <td>
                                            <div class="status-dropdown">
                                                <button class="status-btn <%= helpers.getStatusClass(order.status) %>">
                                                    <%= order.status %> ▼
                                                </button>
                                                <div class="status-dropdown-content">
                                                    <% ['Pending', 'Processing' , 'Shipped' , 'Delivered' , 'Cancelled'
                                                        , 'Return Request' , 'Returned' ].forEach(status=> { %>
                                                        <a href="#" class="status-option" data-status="<%= status %>">
                                                            <%= status %>
                                                        </a>
                                                        <% }) %>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <%= helpers.formatCurrency(order.finalAmount) %>
                                        </td>
                                        <td>
                                            <span class="payment-badge <%= order.paymentDone ? 'paid' : 'pending' %>">
                                                <%= order.paymentMethod.toUpperCase() %>
                                            </span>
                                        </td>
                                        <td>
                                            <button class="view-btn" onclick="viewOrderDetails('<%= order._id %>')">
                                                View Details
                                            </button>
                                        </td>
                                    </tr>
                                    <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Details Modal -->
        <div id="orderModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Order Details</h3>
                    <span class="close-modal">&times;</span>
                </div>
                <div id="modalContent" class="modal-body"></div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            document.querySelectorAll('.status-btn').forEach(btn => {
                const statusText = btn.textContent.trim().replace(' ▼', '');

                // Remove any existing status classes
                btn.classList.forEach(cls => {
                    if (cls.startsWith('status-') && cls !== 'status-btn') {
                        btn.classList.remove(cls);
                    }
                });

                // Add the correct class based on status text
                if (statusText === 'Pending') {
                    btn.classList.add('status-pending');
                } else if (statusText === 'Processing') {
                    btn.classList.add('status-processing');
                } else if (statusText === 'Shipped') {
                    btn.classList.add('status-shipped');
                } else if (statusText === 'Delivered') {
                    btn.classList.add('status-delivered');
                } else if (statusText === 'Cancelled') {
                    btn.classList.add('status-cancelled');
                } else if (statusText === 'Return Request') {
                    btn.classList.add('status-return'); 
                } else if (statusText === 'Returned') {
                    btn.classList.add('status-returned');
                } else if (statusText === 'Return Request') {
                    btn.classList.add('status-return-request');
                }
            });
            document.addEventListener('DOMContentLoaded', () => {
                initializeEventListeners();
            });

            function initializeEventListeners() {
                // Status dropdown handlers
                document.querySelectorAll('.status-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        toggleDropdown(e);
                    });
                });

                // Status option handlers
                document.querySelectorAll('.status-option').forEach(option => {
                    option.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleStatusUpdate(e);
                        closeAllDropdowns();
                    });
                });

                // Modal close handler
                document.querySelector('.close-modal').addEventListener('click', closeModal);
                window.addEventListener('click', (e) => {
                    if (e.target === document.getElementById('orderModal')) {
                        closeModal();
                    }
                });

                // Close dropdowns when clicking outside
                document.addEventListener('click', (e) => {
                    if (!e.target.matches('.status-btn')) {
                        closeAllDropdowns();
                    }
                });
            }

            function toggleDropdown(event) {
                event.preventDefault();
                event.stopPropagation();

                const dropdown = event.target.nextElementSibling;
                closeAllDropdowns();
                dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
            }

            function closeAllDropdowns() {
                document.querySelectorAll('.status-dropdown-content').forEach(dropdown => {
                    dropdown.style.display = 'none';
                });
            }

            async function handleStatusUpdate(event) {
                event.preventDefault();
                const orderId = event.target.closest('tr').dataset.orderId;
                const newStatus = event.target.dataset.status;

                try {
                    const response = await fetch('/admin/orders/updateStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId, status: newStatus })
                    });

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            title: 'Success',
                            text: 'Order status updated successfully',
                            icon: 'success'
                        });
                        location.reload();
                    } else {
                        throw new Error(data.message || 'Failed to update order status');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error',
                        text: error.message || 'Failed to update order status',
                        icon: 'error'
                    });
                }
            }
            async function viewOrderDetails(orderId) {
                try {
                    const response = await fetch(`/admin/orders/${orderId}`);
                    if (!response.ok) throw new Error('Failed to fetch order details');

                    const order = await response.json();
                    console.log('Received order data:', order); 
                    console.log('Order items:', order.orderItems);


                    document.getElementById('modalContent').innerHTML = generateOrderDetailHTML(order);
                    document.getElementById('orderModal').style.display = 'block';
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire('Error', 'Failed to load order details', 'error');
                }
            }

            function generateOrderDetailHTML(order) {
                return `
        <div class="order-details">
            <div class="detail-section">
                <h4>Order Information</h4>
                <p><strong>Order ID:</strong> ${order.orderId}</p>
                <p><strong>Date:</strong> ${formatDateTime(order.createdOn)}</p>
                <p><strong>Status:</strong> ${order.status}</p>
                <p><strong>Payment Method:</strong> ${order.paymentMethod.toUpperCase()}</p>
                <p><strong>Payment Status:</strong> ${order.paymentDone ? 'Paid' : 'Pending'}</p>
            </div>

            <div class="detail-section">
                <h4>Customer Details</h4>
                <p>${order.address.fullName}</p>
                <p>${order.address.address}</p>
                <p>${order.address.city}, ${order.address.state} ${order.address.pincode}</p>
                <p>Phone: ${order.address.mobile}</p>
            </div>

            <div class="detail-section">
                <h4>Order Items</h4>
                <table class="detail-table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${generateOrderItemsHTML(order.orderItems)}
                    </tbody>
                    <tfoot>
                        ${generateOrderSummaryHTML(order)}
                    </tfoot>
                </table>
            </div>
            ${order.cancellation ? generateCancellationHTML(order.cancellation) : ''}
            ${order.return && order.return.isRequested ? generateReturnRequestHTML(order.return, order._id) : ''}
        </div>
    `;
            }
            function closeModal() {
                document.getElementById('orderModal').style.display = 'none';
            }

            // Helper functions
            function formatDateTime(dateString) {
                return new Date(dateString).toLocaleString('en-IN', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            function generateOrderItemsHTML(items) {
                return items.map((item, i) => `
        <tr>
            <td>${item.product.productName}</td>
            <td>${item.quantity}</td>
            <td>₹${item.price.toLocaleString()}</td>
            <td>₹${(item.price * item.quantity).toLocaleString()}</td>
        </tr>
    `).join('');
            }

            function generateOrderSummaryHTML(order) {
                return `
        <tr>
            <td colspan="3" class="text-right"><strong>Subtotal:</strong></td>
            <td>₹${order.totalPrice.toLocaleString()}</td>
        </tr>
        <tr>
            <td colspan="3" class="text-right"><strong>Discount:</strong></td>
            <td>₹${order.discount.toLocaleString()}</td>
        </tr>
        <tr>
            <td colspan="3" class="text-right"><strong>Final Amount:</strong></td>
            <td>₹${order.finalAmount.toLocaleString()}</td>
        </tr>
    `;
            }

            function generateCancellationHTML(cancellation) {
                return `
        <div class="detail-section full-width">
            <h4>Cancellation Information</h4>
            ${cancellation ? `
                <div class="cancellation-section">
                    <p><strong>Cancelled On:</strong> ${formatDateTime(cancellation.cancelledAt)}</p>
                    <p><strong>Reason:</strong> ${cancellation.reason}</p>
                    ${cancellation.otherReason ? `<p><strong>Other Reason:</strong> ${cancellation.otherReason}</p>` : ''}
                    ${cancellation.comments ? `
                        <div class="cancellation-details">
                            <strong>Comments:</strong>
                            <p>${cancellation.comments}</p>
                        </div>
                    ` : ''}
                </div>
            ` : `
                <p class="no-cancellation-info">This order has not been cancelled.</p>
            `}
        </div>
    `;
            }



            document.addEventListener('DOMContentLoaded', () => {
                const searchInput = document.getElementById('searchInput');
                const statusFilter = document.getElementById('statusFilter');
                const sortBy = document.getElementById('sortBy');

                // Debounce function to limit how often the search is performed
                function debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }

                // Function to filter and sort orders
                function filterAndSortOrders() {
                    const rows = Array.from(document.querySelectorAll('.admin-table tbody tr'));
                    const searchTerm = searchInput.value.toLowerCase();
                    const statusValue = statusFilter.value;
                    const sortValue = sortBy.value;

                    rows.forEach(row => {
                        const orderId = row.querySelector('td:first-child').textContent.toLowerCase();
                        const customerName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                        const status = row.querySelector('.status-btn').textContent.trim();

                        // Remove any existing highlights
                        row.classList.remove('highlight');

                        // Search filter
                        const matchesSearch = searchTerm === '' ||
                            orderId.includes(searchTerm) ||
                            customerName.includes(searchTerm);

                        // Status filter
                        const matchesStatus = statusValue === '' || status.includes(statusValue);

                        // Show/hide rows based on filters
                        row.style.display = (matchesSearch && matchesStatus) ? '' : 'none';

                        // Add highlight if search term matches
                        if (matchesSearch && searchTerm !== '') {
                            row.classList.add('highlight');
                        }
                    });

                    // Sort the visible rows
                    const visibleRows = rows.filter(row => row.style.display !== 'none');
                    sortRows(visibleRows, sortValue);
                }

                // Function to sort rows
                function sortRows(rows, sortValue) {
                    const tbody = document.querySelector('.admin-table tbody');

                    rows.sort((a, b) => {
                        switch (sortValue) {
                            case 'date-new':
                                return new Date(getOrderDate(b)) - new Date(getOrderDate(a));
                            case 'date-old':
                                return new Date(getOrderDate(a)) - new Date(getOrderDate(b));
                            case 'amount-high':
                                return getOrderAmount(b) - getOrderAmount(a);
                            case 'amount-low':
                                return getOrderAmount(a) - getOrderAmount(b);
                            default:
                                return 0;
                        }
                    });

                    // Re-append sorted rows
                    rows.forEach(row => tbody.appendChild(row));
                }

                // Helper functions to get sortable values
                function getOrderDate(row) {
                    return row.querySelector('td:nth-child(3)').textContent;
                }

                function getOrderAmount(row) {
                    const amountText = row.querySelector('td:nth-child(5)').textContent;
                    return parseFloat(amountText.replace(/[^0-9.-]+/g, ''));
                }

                //event listeners
                searchInput.addEventListener('input', debounce(filterAndSortOrders, 300));
                statusFilter.addEventListener('change', filterAndSortOrders);
                sortBy.addEventListener('change', filterAndSortOrders);



                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('approve-return-btn')) {
                        const orderId = e.target.dataset.orderId;
                        handleReturnAction(orderId, 'approve');
                    } else if (e.target.classList.contains('reject-return-btn')) {
                        const orderId = e.target.dataset.orderId;
                        handleReturnAction(orderId, 'reject');
                    }
                });
            });

            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('approve-return-btn')) {
                    const orderId = e.target.dataset.orderId;
                    handleReturnAction(orderId, 'approve');
                } else if (e.target.classList.contains('reject-return-btn')) {
                    const orderId = e.target.dataset.orderId;
                    handleReturnAction(orderId, 'reject');
                }
            });

            function generateReturnRequestHTML(returnData, orderId) {
                if (!returnData || !returnData.isRequested) {
                    return '';
                }

                // Format return status with appropriate styling
                const getReturnStatusClass = (status) => {
                    const statusClasses = {
                        'Pending Approval': 'status-pending',
                        'Approved': 'status-processing',
                        'Rejected': 'status-cancelled',
                        'Completed': 'status-delivered'
                    };
                    return statusClasses[status] || 'status-pending';
                };

                // Generate HTML for proof images if they exist
                const proofImagesHTML = returnData.proofImages && returnData.proofImages.length > 0
                    ? `
        <div class="proof-images">
            <strong>Proof Images:</strong>
            <div class="image-gallery">
                ${returnData.proofImages.map((imgUrl, index) =>
                        `<div class="proof-image-container">
                        <img src="${imgUrl}" alt="Return Proof ${index + 1}" class="proof-image" onclick="openImageZoom('${imgUrl}')">
                        <div class="zoom-icon"><i class="fas fa-search-plus"></i></div>
                    </div>`
                    ).join('')}
            </div>
        </div>
        `
                    : '';

                return `
        <div class="detail-section full-width return-section">
            <h4>Return Request Information</h4>
            <div class="return-details">
                <div class="return-info">
                    <p><strong>Request Date:</strong> ${formatDateTime(returnData.requestedAt)}</p>
                    <p><strong>Reason:</strong> ${returnData.reason}</p>
                    ${returnData.otherReason ? `<p><strong>Other Reason:</strong> ${returnData.otherReason}</p>` : ''}
                    ${returnData.comments ? `
                        <div class="return-comments">
                            <strong>Customer Comments:</strong>
                            <p>${returnData.comments}</p>
                        </div>
                    ` : ''}
                    ${proofImagesHTML}
                </div>
                
                <div class="return-status">
                    <p><strong>Status:</strong> <span class="${getReturnStatusClass(returnData.status)}">${returnData.status}</span></p>
                    ${returnData.adminComments ? `
                        <div class="admin-comments">
                            <strong>Admin Response:</strong>
                            <p>${returnData.adminComments}</p>
                        </div>
                    ` : ''}
                </div>
                
                ${returnData.status === 'Pending Approval' ? `
                    <div class="return-actions">
                        <button class="approve-return-btn" data-order-id="${orderId}">Approve Return</button>
                        <button class="reject-return-btn" data-order-id="${orderId}">Reject Return</button>
                        <div class="admin-comment-field">
                            <textarea id="returnAdminComment" placeholder="Add comment (optional)"></textarea>
                        </div>
                    </div>
                ` : ''}
                
                ${returnData.status === 'Approved' || returnData.status === 'Completed' ? `
                    <div class="return-shipment">
                        <p><strong>Return Shipment Status:</strong> ${returnData.returnShipmentStatus || 'Pending'}</p>
                        ${returnData.returnTrackingId ? `<p><strong>Tracking ID:</strong> ${returnData.returnTrackingId}</p>` : ''}
                        ${returnData.refundStatus ? `<p><strong>Refund Status:</strong> ${returnData.refundStatus}</p>` : ''}
                        ${returnData.refundAmount ? `<p><strong>Refund Amount:</strong> ₹${returnData.refundAmount.toLocaleString()}</p>` : ''}
                    </div>
                ` : ''}
            </div>
        </div>
        
        <!-- Image Zoom Modal -->
        <div id="imageZoomModal" class="image-zoom-modal">
            <span class="close-zoom">&times;</span>
            <img class="zoom-modal-content" id="zoomedImage">
        </div>
    `;
            }

            async function handleReturnAction(orderId, action) {
                const adminComment = document.getElementById('returnAdminComment').value;
                const actionText = action === 'approve' ? 'approve' : 'reject';

                try {
                    const result = await Swal.fire({
                        title: `Confirm Return ${action === 'approve' ? 'Approval' : 'Rejection'}`,
                        text: `Are you sure you want to ${actionText} this return request?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: action === 'approve' ? '#3085d6' : '#d33',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: `Yes, ${actionText} it!`
                    });

                    if (result.isConfirmed) {
                        const response = await fetch('/admin/orders/updateReturn', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId,
                                action,
                                adminComment
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            await Swal.fire({
                                title: 'Success',
                                text: `Return request ${actionText}d successfully`,
                                icon: 'success'
                            });
                            closeModal();
                            location.reload();
                        } else {
                            throw new Error(data.message || `Failed to ${actionText} return request`);
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error',
                        text: error.message || `Failed to ${actionText} return request`,
                        icon: 'error'
                    });
                }
            }

            function openImageZoom(imgUrl) {
                const modal = document.getElementById('imageZoomModal');
                const modalImg = document.getElementById('zoomedImage');

                modal.style.display = "block";
                modalImg.src = imgUrl;

                document.body.style.overflow = 'hidden';
            }

            document.addEventListener('DOMContentLoaded', function () {
                document.addEventListener('click', function (event) {
                    if (event.target.classList.contains('close-zoom')) {
                        document.getElementById('imageZoomModal').style.display = "none";
                        document.body.style.overflow = 'auto';
                    }

                    if (event.target.classList.contains('image-zoom-modal')) {
                        document.getElementById('imageZoomModal').style.display = "none";
                        document.body.style.overflow = 'auto';
                    }
                });
            });
        </script>
    </body>

    </html>